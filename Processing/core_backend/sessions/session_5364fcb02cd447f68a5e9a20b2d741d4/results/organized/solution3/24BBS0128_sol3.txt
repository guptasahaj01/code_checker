struct node {
int data;
struct node* next;
}

int
main() {
CircularQueue q;
int
size, choice, value;
printf("Enter the size of the circular queue: ");
scanf("%d", &size);
initializeQueue(&q, size);
printf("\nChoice of Operations\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
while (1) {
printf("Enter your choice: ");scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to enqueue: ");
scanf("%d", &value);
enqueue(&q, value);
break;
case 2:
value = dequeue(&q);
if (value != -1)
printf("Dequeued element: %d\n", value);
break;
case 3:
display(&q);
break;
case 4:
freeQueue(&q);
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice. Please try again.\n");
}
}
return 0;
}

int
isEmpty(CircularQueue *q) {
return q->front == -1;
}

int
enqueue(CircularQueue *q, element) {
if (isFull(q)) {
printf("Queue Overflow! Cannot enqueue %d.\n", element);
return;
}
if (isEmpty(q))
q->front = 0;
q->rear = (q->rear + 1) % q->maxSize;q->items[q->rear] = element;
printf("%d enqueued to the queue.\n", element);
}

void
freeQueue(CircularQueue *q) {
free(q->items);
}

int
dequeue(CircularQueue *q) {
if (isEmpty(q)) {
printf("Queue Underflow! No elements to dequeue.\n");
return -1;
}
int
element = q->items[q->front];
if (q->front == q->rear)
q->front = q->rear = -1;
else
q->front = (q->front + 1) % q->maxSize;
return element;
}

void
display(CircularQueue *q) {
if (isEmpty(q)) {
printf("Queue is empty.\n");
return;
}
printf("Queue elements: ");
int
for ( i = q->front;; i = (i + 1) % q->maxSize) {
printf("%d ", q->items[i]);
if (i == q->rear)
break;
}
printf("\n");
}

int
main() {
CircularQueue q;
int
size, choice, value;
printf("Enter the size of the circular queue: ");
scanf("%d", &size);
initializeQueue(&q, size);
printf("\nChoice of Operations\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
while (1) {
printf("Enter your choice: ");scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to enqueue: ");
scanf("%d", &value);
enqueue(&q, value);
break;
case 2:
value = dequeue(&q);
if (value != -1)
printf("Dequeued element: %d\n", value);
break;
case 3:
display(&q);
break;
case 4:
freeQueue(&q);
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice. Please try again.\n");
}
}
return 0;
}