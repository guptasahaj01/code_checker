bool backtrack(int idx, vector<pair<int, int>>& npVertices, vector<pair<pair<int, int>, pair<int,
int>>>& plots, vector<pair<int, int>>& currentCover) {
if (idx == plots.size()) {
return isExactCover(npVertices, currentCover);
}
currentCover.push_back(plots[idx].first);
currentCover.push_back(plots[idx].second);
if (backtrack(idx + 1, npVertices, plots, currentCover)) return true;
currentCover.pop_back();
currentCover.pop_back();
if (backtrack(idx + 1, npVertices, plots, currentCover)) return true;
return false;
}

bool isExactCover(vector<pair<int, int>>& npVertices, vector<pair<int, int>>& coveredArea) {
return false; // placeholder
}

int main() {
string expr = "2+(3-1)+4";
cout << evaluateExpression(expr) << endl;
return 0;
}