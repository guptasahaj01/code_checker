void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty.\n");
} else {
struct Node *temp = head;
head = head->next;
if (head != NULL) head->prev = NULL;
printf("%d deleted from the beginning.\n", temp->data);
free(temp);
}
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty.\n");
} else if (head->next == NULL) {
printf("%d deleted from the end.\n", head->data);
free(head);
head = NULL;
} else {
struct Node *temp = head;
while (temp->next != NULL) temp = temp->next;
printf("%d deleted from the end.\n", temp->data);
temp->prev->next = NULL;
free(temp);
}
}

void deleteAtPosition(int pos) {
if (head == NULL) {
printf("List is empty.\n");
} else if (pos == 1) {
struct Node *temp = head;
head = head->next;
if (head != NULL) head->prev = NULL;
printf("%d deleted from position %d.\n", temp->data, pos);
free(temp);
} else {
struct Node *temp = head;
for (int i = 1; i < pos && temp != NULL; i++) temp = temp->next;
if (temp == NULL) {
printf("Invalid position.\n");
} else {
printf("%d deleted from position %d.\n", temp->data, pos);
if (temp->next != NULL) temp->next->prev = temp->prev;
if (temp->prev != NULL) temp->prev->next = temp->next;
free(temp);
}
}
}

void search(int value) {
struct Node *temp = head;
int pos = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("%d found at position %d.\n", value, pos);
return;
}
temp = temp->next;
pos++;
}
printf("%d not found in the list.\n", value);
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
} else {
struct Node *temp = head;
printf("List: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

int main() {
int choice, value, pos;
while (1) {
printf("\n1.Insert Beginning\n2.Insert End\n3.Insert at Position\n");
printf("4.Delete Beginning\n5.Delete End\n6.Delete at Position\n");
printf("7.Search\n8.Display\n9.Exit\nEnter choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: printf("Enter value: "); scanf("%d", &value);
insertAtBeginning(value); break;
case 2: printf("Enter value: "); scanf("%d", &value);
insertAtEnd(value); break;
case 3: printf("Enter value and position: "); scanf("%d%d",
&value, &pos); insertAtPosition(value, pos); break;
case 4: deleteAtBeginning(); break;
case 5: deleteAtEnd(); break;
case 6: printf("Enter position: "); scanf("%d", &pos);
deleteAtPosition(pos); break;
case 7: printf("Enter value to search: "); scanf("%d", &value);
search(value); break;
case 8: display(); break;
case 9: return 0;
default: printf("Invalid choice!\n");
}
}
}