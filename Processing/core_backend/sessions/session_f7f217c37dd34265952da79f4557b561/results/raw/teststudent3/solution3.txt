class Stack {
private:
vector<T> elements;
public:
// Push an element onto the stack
void push(const T& value) {
elements.push_back(value);
}
// Remove and return the top element
T pop() {
if (isEmpty()) {
throw runtime_error("Cannot pop from an empty stack");
}
T top = elements.back();
elements.pop_back();
return top;
}
// Check if the stack is empty
bool isEmpty() const {
return elements.empty();
}
// View the top element without removing it
T peek() const {
if (isEmpty()) {
throw runtime_error("Cannot peek an empty stack");
}
return elements.back();
}
// Get the current size of the stack
size_t size() const {
return elements.size();
}
}

int main() {
try {
// Create a stack of integers
Stack<int> intStack;
// Print initial state
cout << "Stack Operations Demonstration:" << endl;
cout << "Is the stack empty? " << (intStack.isEmpty() ? "Yes" : "No") << endl;
// Push elements onto the stack
cout << "Pushing elements: 5, 10, 15, 20, 25" << endl;
intStack.push(5);
intStack.push(10);
intStack.push(15);
intStack.push(20);
intStack.push(25);
// Show current state
cout << "Stack size after pushes: " << intStack.size() << endl;
cout << "Top element: " << intStack.peek() << endl;
// Pop and display elements
cout << "Popping and displaying elements: ";
while (!intStack.isEmpty()) {
cout << intStack.pop() << " ";
}
cout << endl;
// Check if stack is empty after all pops
cout << "Is the stack empty after pops? " << (intStack.isEmpty() ? "Yes" : "No") << endl;
// Try to peek on an empty stack
cout << "Attempting to peek on an empty stack..." << endl;
intStack.peek(); // This should throw an exception
}
catch (const exception& e) {
cout << "Exception caught: " << e.what() << endl;
}
return 0;
}