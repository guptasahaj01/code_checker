struct Node {
int data;
struct Node* next;
}

struct Node {
int data;
struct Node *prev;
struct Node *next;
}

void pop() {
if (top == -1) {
printf("Stack Underflow! Cannot pop from an empty stack.\n");
} else {
printf("Popped %d from the stack.\n", stack[top--]);
}
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
printf("Doubly Linked List: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void dequeue() {
if (isEmpty()) {
printf("\nQueue is Empty. Cannot dequeue.\n");
return;
}
int value = circularQueue[front];
if (front == rear) {
front = rear = -1; // Queue becomes empty
} else {
front = (front + 1) % SIZE;
}
printf("\nDequeued: %d\n", value);
}

void dequeue() {
if (front == -1) {
printf("Queue Underflow! Cannot dequeue from an empty queue.\n");
} else {
printf("Dequeued %d from the queue.\n", queue[front]);
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % MAX;
}
}
}

void enqueue(int value) {
if (isFull()) {
printf("\nQueue is Full. Cannot enqueue %d.\n", value);
return;
}
if (isEmpty()) {
front = rear = 0;
} else {
rear = (rear + 1) % SIZE;
}
circularQueue[rear] = value;
printf("\nEnqueued: %d\n", value);
}

void enqueue(int element) {
if ((rear + 1) % MAX == front) {
printf("Queue Overflow! Cannot enqueue %d.\n", element);
} else {
if (front == -1) {
front = 0;
}
rear = (rear + 1) % MAX;
queue[rear] = element;
printf("Enqueued %d into the queue.\n", element);
}
}

int isFull() {
return (front == 0 && rear == SIZE - 1) || (front == rear + 1);
}

int isEmpty() {
return front == -1;
}

void display() {
if (isEmpty()) {
printf("\nQueue is Empty.\n");
return;
}
printf("\nCircular Queue: ");
int i = front;
while (1) {
printf("%d ", circularQueue[i]);
if (i == rear) {
break;
}
i = (i + 1) % SIZE;
}
printf("\n");
}

void search(int value) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("Element %d found at position %d.\n", value, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found in the list.\n", value);
}

void search(int data) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == data) {
printf("Element %d found at position %d.\n", data, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found in the list.\n", data);
}

void insertAtBeginning(int value) {
struct Node* newNode = createNode(value);
if (head == NULL) {
head = newNode;
} else {
newNode->next = head;
head->prev = newNode;
head = newNode;
}
printf("Inserted %d at the beginning.\n", value);
}

void insertAtBeginning(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->next = head;
head = newNode;
printf("Inserted %d at the beginning.\n", data);
}

void insertAtPosition(int value, int position) {
struct Node* newNode = createNode(value);
if (position == 1) {
insertAtBeginning(value);
return;
}
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL) {
printf("Position out of bounds.\n");
return;
}
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds.\n");
return;
}
newNode->next = temp->next;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
newNode->prev = temp;
printf("Inserted %d at position %d.\n", value, position);
}

void insertAtPosition(int data, int position) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
if (position == 1) {
newNode->next = head;
head = newNode;
printf("Inserted %d at position %d.\n", data, position);
return;
}
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL) {
printf("Position out of bounds.\n");
free(newNode);
return;
}
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds.\n");
free(newNode);
return;
}
newNode->next = temp->next;
temp->next = newNode;
printf("Inserted %d at position %d.\n", data, position);
}

void insertAtEnd(int value) {
struct Node* newNode = createNode(value);
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("Inserted %d at the end.\n", value);
}

void insertAtEnd(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
printf("Inserted %d at the end.\n", data);
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
printf("Deleted %d from the beginning.\n", temp->data);
free(temp);
}

void deleteAtPosition(int position) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
if (position == 1) {
deleteAtBeginning();
return;
}
struct Node* temp = head;
for (int i = 1; i < position; i++) {
if (temp == NULL) {
printf("Position out of bounds.\n");
return;
}
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds.\n");
return;
}
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
if (temp->prev != NULL) {
temp->prev->next = temp->next;
}
printf("Deleted %d from position %d.\n", temp->data, position);
free(temp);
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
if (temp->prev != NULL) {
temp->prev->next = NULL;
} else {
head = NULL;
}
printf("Deleted %d from the end.\n", temp->data);
free(temp);
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty. Cannot delete.\n");
return;
}
struct Node* temp = head;
head = head->next;
printf("Deleted %d from the beginning.\n", temp->data);
free(temp);
}

void deleteFromEnd() {
if (head == NULL) {
printf("List is empty. Cannot delete.\n");
return;
}
if (head->next == NULL) {
printf("Deleted %d from the end.\n", head->data);
free(head);
head = NULL;
return;
}
struct Node* temp = head;
while (temp->next->next != NULL) {
temp = temp->next;
}
printf("Deleted %d from the end.\n", temp->next->data);
free(temp->next);
temp->next = NULL;
}

void deleteFromPosition(int position) {
if (head == NULL) {
printf("List is empty. Cannot delete.\n");
return;
}
if (position == 1) {
struct Node* temp = head;
head = head->next;
printf("Deleted %d from position %d.\n", temp->data, position);
free(temp);
return;
}
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL || temp->next == NULL) {
printf("Position out of bounds.\n");
return;
}
temp = temp->next;
}
if (temp->next == NULL) {
printf("Position out of bounds.\n");
return;
}
struct Node* toDelete = temp->next;
temp->next = toDelete->next;
printf("Deleted %d from position %d.\n", toDelete->data, position);
free(toDelete);
}

void display() {
if (top == -1) {
printf("The stack is empty.\n");
} else {
printf("Stack elements: ");
for (int i = top; i >= 0; i--) {
printf("%d ", stack[i]);
}
printf("\n");
}
}

void display() {
if (front == -1) {
printf("The queue is empty.\n");
} else {
printf("Queue elements: ");
for (int i = front; i != rear; i = (i + 1) % MAX) {
printf("%d ", queue[i]);
}
printf("%d\n", queue[rear]);
}
}

void display() {
if (head == NULL) {
printf("The list is empty.\n");
return;
}
printf("List elements: ");
struct Node* temp = head;
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void push(int element) {
if (top == MAX - 1) {
printf("Stack Overflow! Cannot push %d onto the stack.\n", element);
} else {
stack[++top] = element;
printf("Pushed %d onto the stack.\n", element);
}
}

int main() {
int choice, element;
do {
printf("\nStack Operations:\n");
printf("1. PUSH\n");
printf("2. POP\n");
printf("3. DISPLAY\n");
printf("4. EXIT\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the element to push: ");
scanf("%d", &element);
push(element);
break;
case 2:
pop();
break;
case 3:
display();
break;
case 4:
printf("Exiting program.\n");
break;
default:
printf("Invalid choice! Please try again.\n");
}
} while (choice != 4);
return 0;
}

int main() {
int choice, element;
do {
printf("\nQueue Operations:\n");
printf("1. ENQUEUE\n");
printf("2. DEQUEUE\n");
printf("3. DISPLAY\n");
printf("4. EXIT\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the element to enqueue: ");
scanf("%d", &element);
enqueue(element);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
printf("Exiting program.\n");
break;
default:
printf("Invalid choice! Please try again.\n");
}
} while (choice != 4);
return 0;
}

int main() {
int choice, value;
do {
printf("\nCircular Queue Operations:\n");
printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to enqueue: ");
scanf("%d", &value);
enqueue(value);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
printf("\nExiting...\n");
break;
default:
printf("\nInvalid choice! Please try again.\n");
}
} while (choice != 4);
return 0;
}

int main() {
int choice, data, position;
do {
printf("\nSingly Linked List Operations:\n");
printf("1. Insert at Beginning\n");
printf("2. Insert at End\n");
printf("3. Insert at Position\n");
printf("4. Delete from Beginning\n");
printf("5. Delete from End\n");
printf("6. Delete from Position\n");
printf("7. Search\n");
printf("8. Display\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the data to insert: ");
scanf("%d", &data);
insertAtBeginning(data);
break;
case 2:
printf("Enter the data to insert: ");
scanf("%d", &data);
insertAtEnd(data);
break;
case 3:
printf("Enter the data to insert: ");
scanf("%d", &data);
printf("Enter the position to insert: ");
scanf("%d", &position);
insertAtPosition(data, position);
break;
case 4:
deleteFromBeginning();
break;
case 5:
deleteFromEnd();
break;
case 6:
printf("Enter the position to delete: ");
scanf("%d", &position);
deleteFromPosition(position);
break;
case 7:
printf("Enter the element to search: ");
scanf("%d", &data);
search(data);
break;
case 8:
display();
break;
case 9:
printf("Exiting program.\n");
break;
default:
printf("Invalid choice! Please try again.\n");
}
} while (choice != 9);
return 0;
}

int main() {
int choice, value, position;
do {
printf("\nDoubly Linked List Operations:\n");
printf("1. Insert at Beginning\n");
printf("2. Insert at End\n");
printf("3. Insert at Position\n");
printf("4. Delete at Beginning\n");
printf("5. Delete at End\n");
printf("6. Delete at Position\n");
printf("7. Search\n");
printf("8. Display\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter value to insert at beginning: ");
scanf("%d", &value);
insertAtBeginning(value);
break;
case 2:
printf("Enter value to insert at end: ");
scanf("%d", &value);
insertAtEnd(value);
break;
case 3:
printf("Enter value to insert: ");
scanf("%d", &value);
printf("Enter position: ");
scanf("%d", &position);
insertAtPosition(value, position);
break;
case 4:
deleteAtBeginning();
break;
case 5:
deleteAtEnd();
break;
case 6:
printf("Enter position to delete: ");
scanf("%d", &position);
deleteAtPosition(position);
break;
case 7:
printf("Enter value to search: ");
scanf("%d", &value);
search(value);
break;
case 8:
display();
break;
case 9:
printf("Exiting...\n");
break;
default:
printf("Invalid choice! Please try again.\n");
}
} while (choice != 9);
return 0;
}