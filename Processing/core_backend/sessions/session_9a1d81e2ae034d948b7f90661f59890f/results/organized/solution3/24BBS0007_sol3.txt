int evaluateExpression(string expression) {
stack<int> valueStack;
stack<char> operatorStack;
int currentNum = 0;
char lastOperator = '+';
expression += '+'; // To handle the last number
for (int i = 0; i < expression.size(); i++) {
char currentChar = expression[i];
if (isdigit(currentChar)) {
currentNum = currentNum * 10 + (currentChar - '0');
}
if ((currentChar == '+' || currentChar == '-' || currentChar == '(' || currentChar == ')') || i ==
expression.size() - 1) {
if (lastOperator == '+') valueStack.push(currentNum);
else if (lastOperator == '-') valueStack.push(-currentNum);
if (currentChar == '(') operatorStack.push(lastOperator);
else if (currentChar == ')') {
int insideParentheses = 0;
while (!valueStack.empty()) {
insideParentheses += valueStack.top();
valueStack.pop();
}
valueStack.push(insideParentheses);
}
if (currentChar == '+' || currentChar == '-') lastOperator = currentChar;
currentNum = 0;
}
}
int result = 0;
while (!valueStack.empty()) {
result += valueStack.top();
valueStack.pop();
}
return result;
}

int main() {
string expr = "2+(3-1)+4";
cout << evaluateExpression(expr) << endl;
return 0;
}