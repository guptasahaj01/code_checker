struct node {
int data;
struct node *next;
}

struct node {
int data;
struct node *next;
}

struct node {
int data;
struct node *next;
}

struct Node {
int data;
struct Node *prev;
struct Node *next;
}

void push() {
int num;
struct node *t = (struct node *)malloc(sizeof(struct node));
if (t == NULL) {
printf("Memory allocation failed.\n");
return;
}
printf("Enter the data to be pushed: ");
scanf("%d", &num);
t->data = num;
t->next = start;
start = t;
printf("%d pushed onto the stack.\n", num);
}

void pop() {
if (start == NULL) {
printf("Stack is empty. Cannot perform POP operation.\n");
} else {
struct node *t = start;
printf("%d popped from the stack.\n", t->data);
start = start->next;
free(t);
}
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = head;
printf("List contents: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void dequeue() {
if (front == -1) {
printf("Queue is empty. Cannot perform DEQUEUE operation.\n");
} else {
int num = circularQueue[front];
printf("%d dequeued from the circular queue.\n", num);
if (front == rear) {
// Queue becomes empty
front = rear = -1;
} else {
front = (front + 1) % MAX;
}
}
}

void dequeue() {
if (front == NULL) {
printf("Queue is empty. Cannot perform DEQUEUE operation.\n");
} else {
struct node *t = front;
printf("%d dequeued from the queue.\n", t->data);
front = front->next;
if (front == NULL) {
rear = NULL;
}
free(t);
}
}

void enqueue() {
int num;
printf("Enter the data to enqueue: ");
scanf("%d", &num);
if ((rear + 1) % MAX == front) {
printf("Queue is full. Cannot enqueue %d.\n", num);
} else {
if (front == -1) {
front = 0;
}
rear = (rear + 1) % MAX;
circularQueue[rear] = num;
printf("%d enqueued into the circular queue.\n", num);
}
}

void enqueue() {
int num;
struct node *t = (struct node *)malloc(sizeof(struct node));
if (t == NULL) {
printf("Memory allocation failed.\n");
return;
}
printf("Enter the data to enqueue: ");
scanf("%d", &num);
t->data = num;
t->next = NULL;
if (rear == NULL) {
front = rear = t;
} else {
rear->next = t;
rear = t;
}
printf("%d enqueued into the queue.\n", num);
}

void search(int value) {
struct Node *temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("%d found at position %d.\n", value, position);
return;
}
temp = temp->next;
position++;
}
printf("%d not found in the list.\n", value);
}

void insertAtBeginning(int value) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
newNode->prev = NULL;
newNode->next = head;
if (head != NULL) {
head->prev = newNode;
}
head = newNode;
printf("%d inserted at the beginning.\n", value);
}

void insertAtBeginning() {
int value;
struct node *newNode = (struct node *)malloc(sizeof(struct node));
if (newNode == NULL) return;
printf("Enter value: ");
scanf("%d", &value);
newNode->data = value;
newNode->next = head;
head = newNode;
}

void insertAtPosition(int value, int position) {
if (position == 1) {
insertAtBeginning(value);
return;
}
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
struct Node *temp = head;
for (int i = 1; i < position - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
newNode->next = temp->next;
newNode->prev = temp;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
printf("%d inserted at position %d.\n", value, position);
}

void insertAtPosition() {
int value, position;
printf("Enter position: ");
scanf("%d", &position);
if (position < 1) return;
struct node *newNode = (struct node *)malloc(sizeof(struct node));
if (newNode == NULL) return;
printf("Enter value: ");
scanf("%d", &value);
newNode->data = value;
if (position == 1) {
newNode->next = head;
head = newNode;
} else {
struct node *temp = head;
for (int i = 1; i < position - 1 && temp != NULL; i++) temp = temp->next;
if (temp == NULL) return;
newNode->next = temp->next;
temp->next = newNode;
}
}

void insertAtEnd(int value) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
newNode->prev = NULL;
head = newNode;
} else {
struct Node *temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("%d inserted at the end.\n", value);
}

void insertAtEnd() {
int value;
struct node *newNode = (struct node *)malloc(sizeof(struct node));
if (newNode == NULL) return;
printf("Enter value: ");
scanf("%d", &value);
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct node *temp = head;
while (temp->next != NULL) temp = temp->next;
temp->next = newNode;
}
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
printf("%d deleted from the beginning.\n", temp->data);
free(temp);
}

void deleteFromPosition(int position) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
if (position == 1) {
deleteFromBeginning();
return;
}
struct Node *temp = head;
for (int i = 1; i < position && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position.\n");
return;
}
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
if (temp->prev != NULL) {
temp->prev->next = temp->next;
}
printf("%d deleted from position %d.\n", temp->data, position);
free(temp);
}

void deleteFromPosition() {
int position;
printf("Enter position: ");
scanf("%d", &position);
if (position < 1 || head == NULL) return;
if (position == 1) {
struct node *temp = head;
head = head->next;
free(temp);
return;
}
struct node *temp = head, *prev = NULL;
for (int i = 1; i < position && temp != NULL; i++) {
prev = temp;
temp = temp->next;
}
if (temp == NULL) return;
prev->next = temp->next;
free(temp);
}

void deleteFromBeginning() {
if (head == NULL) return;
struct node *temp = head;
head = head->next;
free(temp);
}

void deleteFromEnd() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = head;
if (head->next == NULL) {
head = NULL;
} else {
while (temp->next != NULL) {
temp = temp->next;
}
temp->prev->next = NULL;
}
printf("%d deleted from the end.\n", temp->data);
free(temp);
}

void deleteFromEnd() {
if (head == NULL) return;
if (head->next == NULL) {
free(head);
head = NULL;
return;
}
struct node *temp = head;
while (temp->next->next != NULL) temp = temp->next;
free(temp->next);
temp->next = NULL;
}

void search() {
int value;
printf("Enter value: ");
scanf("%d", &value);
struct node *temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("%d found at position %d.\n", value, position);
return;
}
temp = temp->next;
position++;
}
printf("%d not found.\n", value);
}

void display() {
if (start == NULL) {
printf("Stack is empty.\n");
} else {
struct node *temp = start;
printf("Stack contents: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

void display() {
if (front == NULL) {
printf("Queue is empty.\n");
} else {
struct node *temp = front;
printf("Queue contents: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

void display() {
if (front == -1) {
printf("Queue is empty.\n");
} else {
printf("Circular Queue contents: ");
int i = front;
while (1) {
printf("%d ", circularQueue[i]);
if (i == rear) {
break;
}
i = (i + 1) % MAX;
}
printf("\n");
}
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct node *temp = head;
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

int main()
{
int n;
while(1)
{
printf("Enter the way to proceed:\n");
printf("1.pop\n2.push\n3.display\n4.Exit\n");
scanf("%d",&n);
switch(n)
{
case 1:
{
pop();
break;
}
case 2:
{
push();
break;
}
case 3:
{
display();
break;
}
case 4:
{
printf("Exiting");
break;
}
default:
printf(“Enter a valid choice\n”);
break;
}
}
}

int main()
{
int n;
while(1)
{
printf("Enter the way to proceed:\n");
printf("1.Dequeue\n2.Enqueue\n3.display\n4.Exit\n");
scanf("%d",&n);
switch(n)
{
case 1:
{
dequeue();
break;
}
case 2:
{
enqueue();
break;
}
case 3:
{
display();
break;
}
case 4:
{
printf("Exiting");
return 0;
}
default:
printf("Enter a valid choice");
break;
}
}
}

int main() {
int choice;
while (1) {
printf("\nMenu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
enqueue();
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice. Please try again.\n");
}
}
}

int main() {
int choice;
while (1) {
printf("\n1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n4. Delete from Beginning\n5.
Delete from End\n6. Delete from Position\n7. Search\n8. Display\n9. Exit\n");
printf("Enter choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: insertAtBeginning(); break;
case 2: insertAtEnd(); break;
case 3: insertAtPosition(); break;
case 4: deleteFromBeginning(); break;
case 5: deleteFromEnd(); break;
case 6: deleteFromPosition(); break;
case 7: search(); break;
case 8: display(); break;
case 9: return 0;
}
}
}

int main() {
int choice, value, position;
while (1) {
printf("\nMenu:\n");
printf("1. Insert at Beginning\n");
printf("2. Insert at End\n");
printf("3. Insert at Position\n");
printf("4. Delete from Beginning\n");
printf("5. Delete from End\n");
printf("6. Delete from Position\n");
printf("7. Search\n");
printf("8. Display\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter value to insert at the beginning: ");
scanf("%d", &value);
insertAtBeginning(value);
break;
case 2:
printf("Enter value to insert at the end: ");
scanf("%d", &value);
insertAtEnd(value);
break;
case 3:
printf("Enter value and position to insert: ");
scanf("%d %d", &value, &position);
insertAtPosition(value, position);
break;
case 4:
deleteFromBeginning();
break;
case 5:
deleteFromEnd();
break;
case 6:
printf("Enter position to delete: ");
scanf("%d", &position);
deleteFromPosition(position);
break;
case 7:
printf("Enter value to search: ");
scanf("%d", &value);
search(value);
break;
case 8:
display();
break;
case 9:
printf("Exiting...\n");
return 0;
default:
printf("Invalid choice. Try again.\n");
}
}
return 0;
}