struct Node {
int data;
struct Node* next;
}

struct Node {
int data;
struct Node* prev;
struct Node* next;
}

void push(int data) {
if (isFull()) {
printf("Stack overflow!\n");
} else {
stack[++top] = data;
printf("%d pushed to stack\n", data);
}
}

int isFull() {
return (top == max - 1);
}

int isFull() {
return ((rear + 1) % MAX_SIZE == front);
}

int isFull() {
return (rear == MAX_SIZE - 1);
}

void enqueue(int data) {
if (isFull()) {
printf("Queue Overflow!\n");
} else {
if (isEmpty()) {
front = 0;
}
rear++;
queue[rear] = data;
printf("%d enqueued to queue\n", data);
}
}

int isEmpty() {
return (front == -1 && rear == -1);
}

int isEmpty() {
return (top == -1);
}

int pop() {
if (isEmpty()) {
printf("Stack underflow!\n");
return -1;
} else {
return stack[top--];
}
}

int isEmpty() {
return (front == -1 && rear == -1);
}

void display() {
if (isEmpty()) {
printf("Stack is empty!\n");
} else {
printf("Stack elements:\n");
for (int i = top; i >= 0; i--) {
printf("%d ", stack[i]);
}
printf("\n");
}
}

void display() {
if (head == NULL) {
printf("List is empty!\n");
} else {
struct Node* temp = head;
printf("List elements:\n");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

void enqueue(int data) {
if (isFull()) {
printf("Queue Overflow!\n");
} else {
if (isEmpty()) {
front = rear = 0;
} else {
rear = (rear + 1) % MAX_SIZE;
}
queue[rear] = data;
printf("%d enqueued to queue\n", data);
}
}

int dequeue() {
if (isEmpty()) {
printf("Queue Underflow!\n");
return -1;
} else {
int data = queue[front];
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % MAX_SIZE;
}
return data;
}
}

int dequeue() {
if (isEmpty()) {
printf("Queue Underflow!\n");
return -1;
} else {
int data = queue[front];
if (front == rear) {
front = rear = -1;
} else {
front++;
}
return data;
}
}

void insertAtPosition(int data, int position) {
if (position == 0) {
insertAtBeginning(data);
} else {
struct Node* newNode = createNode(data);
struct Node* temp = head;
for (int i = 0; i < position - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
newNode->next = temp->next;
newNode->prev = temp;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
}
}
}

void insertAtPosition(int data, int position) {
if (position == 0) {
insertAtBeginning(data);
} else {
struct Node* newNode = createNode(data);
struct Node* temp = head;
for (int i = 0; i < position - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
newNode->next = temp->next;
temp->next = newNode;
}
}
}

void insertAtBeginning(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
newNode->next = head;
head->prev = newNode;
head = newNode;
}
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty!\n");
} else {
struct Node* temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
free(temp);
}
}

void deleteAtPosition(int position) {
if (head == NULL) {
printf("List is empty!\n");
} else if (position == 0) {
deleteFromBeginning();
} else {
struct Node* temp = head;
for (int i = 0; i < position && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
if (temp->prev != NULL) {
temp->prev->next = temp->next;
} else {
head = temp->next;
}
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
free(temp);
}
}
}

void deleteAtPosition(int position) {
if (head == NULL) {
printf("List is empty!\n");
} else if (position == 0) {
deleteFromBeginning();
} else {
struct Node* temp = head;
struct Node* prev = NULL;
for (int i = 0; i < position && temp != NULL; i++) {
prev = temp;
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
if (prev != NULL) {
prev->next = temp->next;
} else {
head = temp->next;
}
free(temp);
}
}
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty!\n");
} else {
struct Node* temp = head;
head = head->next;
free(temp);
}
}

void deleteFromEnd() {
if (head == NULL) {
printf("List is empty!\n");
} else if (head->next == NULL) {
free(head);
head = NULL;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->prev->next = NULL;
free(temp);
}
}

void deleteFromEnd() {
if (head == NULL) {
printf("List is empty!\n");
} else if (head->next == NULL) {
free(head);
head = NULL;
} else {
struct Node* temp = head;
while (temp->next->next != NULL) {
temp = temp->next;
}
free(temp->next);
temp->next = NULL;
}
}

int search(int data) {
struct Node* temp = head;
int position = 0;
while (temp != NULL) {
if (temp->data == data) {
return position;
}
temp = temp->next;
position++;
}
return -1; // Element not found
}

int search(int data) {
struct Node* temp = head;
int position = 0;
while (temp != NULL) {
if (temp->data == data) {
return position;
}
temp = temp->next;
position++;
}
return -1; // Element not found
}

void insertAtEnd(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
}

void insertAtEnd(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
}

void insertAtBeginning(int data) {
struct Node* newNode = createNode(data);
newNode->next = head;
head = newNode;
}

void display() {
if (isEmpty()) {
printf("Queue is empty!\n");
} else {
printf("Queue elements:\n");
for (int i = front; i <= rear; i++) {
printf("%d ", queue[i]);
}
printf("\n");
}
}

void display() {
if (isEmpty()) {
printf("Queue is empty!\n");
} else {
printf("Queue elements:\n");
int i = front;
do {
printf("%d ", queue[i]);
i = (i + 1) % MAX_SIZE;
} while (i != (rear + 1) % MAX_SIZE);
printf("\n");
}
}

void display() {
if (head == NULL) {
printf("List is empty!\n");
} else {
struct Node* temp = head;
printf("List elements:\n");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

int main() {
int choice, data;
while (1) {
printf("\nMenu:\n");
printf("1. Push\n");
printf("2. Pop\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to push: ");
scanf("%d", &data);
push(data);
break;
case 2:
data = pop();
if (data != -1) {
printf("%d popped from stack\n", data);
}
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("Invalid choice!\n");
}
}
return 0;
}

int main() {
int choice, data;
while (1) {
printf("\nMenu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to enqueue: ");
scanf("%d", &data);
enqueue(data);
break;
case 2:
data = dequeue();
if (data != -1) {
printf("%d dequeued from queue\n", data);
}
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("Invalid choice!\n");
}
}
return 0;
}

int main() {
int choice, data;
while (1) {
printf("\nMenu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to enqueue: ");
scanf("%d", &data);
enqueue(data);
break;
case 2:
data = dequeue();
if (data != -1) {
printf("%d dequeued from queue\n", data);
}
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("Invalid choice!\n");
}
}
return 0;
}

int main() {
int choice, data, position;
while (1) {
printf("\nMenu:\n");
printf("1. Insert\n");
printf("2. Delete\n");
printf("3. Search\n");
printf("4. Display\n");
printf("5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to insert: ");
scanf("%d", &data);
printf("1. Beginning\n");
printf("2. End\n");
printf("3. At a given position\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
insertAtBeginning(data);
break;
case 2:
insertAtEnd(data);
break;
case 3:
printf("Enter position: ");
scanf("%d", &position);
insertAtPosition(data, position);
break;
default:
printf("Invalid choice!\n");
}
break;
case 2:
printf("1. Beginning\n");
printf("2. End\n");
printf("3. At a given position\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
deleteFromBeginning();
break;
case 2:
deleteFromEnd();
break;
case 3:
printf("Enter position: ");
scanf("%d", &position);
deleteAtPosition(position);
break;
default:
printf("Invalid choice!\n");
}
break;
case 3:
printf("Enter data to search: ");
scanf("%d", &data);
position = search(data);
if (position == -1) {
printf("Element not found!\n");
} else {
printf("Element found at position %d\n", position);
}
break;
case 4:
display();
break;
case 5:
exit(0);
default:
printf("Invalid choice!\n");
}
}
return 0;
}

int main() {
int choice, data, position;
while (1) {
printf("\nMenu:\n");
printf("1. Insert\n");
printf("2. Delete\n");
printf("3. Search\n");
printf("4. Display\n");
printf("5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to insert: ");
scanf("%d", &data);
printf("1. Beginning\n");
printf("2. End\n");
printf("3. At a given position\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
insertAtBeginning(data);
break;
case 2:
insertAtEnd(data);
break;
case 3:
printf("Enter position: ");
scanf("%d", &position);
insertAtPosition(data, position);
break;
default:
printf("Invalid choice!\n");
}
break;
case 2:
printf("1. Beginning\n");
printf("2. End\n");
printf("3. At a given position\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
deleteFromBeginning();
break;
case 2:
deleteFromEnd();
break;
case 3:
printf("Enter position: ");
scanf("%d", &position);
deleteAtPosition(position);
break;
default:
printf("Invalid choice!\n");
}
break;
case 3:
printf("Enter data to search: ");
scanf("%d", &data);
position = search(data);
if (position == -1) {
printf("Element not found!\n");
} else {
printf("Element found at position %d\n", position);
}
break;
case 4:
display();
break;
case 5:
exit(0);
default:
printf("Invalid choice!\n");
}
}
return 0;
}