int evaluateExpression(string expression) {
stack<int> numbers;
char op = '+';
int currentNumber = 0;
expression += "+";
for (int i = 0; i < expression.size(); i++) {
char c = expression[i];
if (isdigit(c)) {
currentNumber = currentNumber * 10 + (c - '0');
}
if ((c == '+' || c == '-' || c == '(' || c == ')') || i == expression.size() - 1) {
if (op == '+') numbers.push(currentNumber);
else if (op == '-') numbers.push(-currentNumber);
if (c == '(') op = '(';
else if (c == ')') {
int sum = 0;
while (!numbers.empty()) {
sum += numbers.top();
numbers.pop();
}
numbers.push(sum);
}
if (c == '+' || c == '-') op = c;
currentNumber = 0;
}
}
int total = 0;
while (!numbers.empty()) {
total += numbers.top();
numbers.pop();
}
return total;
}

int main() {
vector<vector<int>> matrix = {
{1, 2, 3, 4},
{5, 6, 7, 8},
{9,10,11,12}
};
vector<int> result = boundaryTraversal(matrix);
for (int val : result) cout << val << " ";
cout << endl;
return 0;
}