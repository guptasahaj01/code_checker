struct Node {
int data;
struct Node* next;
}

void Enqueue(int x) {
if ((rear + 1) % N == front) {
printf("Queue Overflow\n");
} else if (front == -1 && rear == -1) {
front = rear = 0;
queue[rear] = x;
printf("%d enqueued.\n", x);
} else {
rear = (rear + 1) % N;
queue[rear] = x;
printf("%d enqueued.\n", x);
}
}

void InsertAtBeginning(int x) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = x;
newNode->next = head;
head = newNode;
printf("%d inserted at the beginning.\n", x);
}

void Dequeue() {
if (front == -1) {
printf("Queue Underflow\n");
} else {
printf("Dequeued: %d\n", queue[front]);
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % N;
}
}
}

void Display() {
if (front == -1) {
printf("Queue is empty\n");
} else {
int i = front;
printf("Queue elements: ");
while (i != rear) {
printf("%d ", queue[i]);
i = (i + 1) % N;
}
printf("%d\n", queue[rear]);
}
}

void InsertAtEnd(int x) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = x;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
printf("%d inserted at the end.\n", x);
}

int main() {
int choice, value;
while (1) {
printf("\nMenu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display the Queue\n");
printf("4. Quit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the element to enqueue: ");
scanf("%d", &value);
Enqueue(value);
break;
case 2:
Dequeue();
break;
case 3:
Display();
break;
case 4:
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice! Please try again.\n");
}
}
}