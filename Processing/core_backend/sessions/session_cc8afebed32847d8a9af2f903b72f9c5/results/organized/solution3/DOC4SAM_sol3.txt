int evaluateExpression(string expression) {
stack<int> values;
char operatorChar = '+';
int num = 0;
expression += "+";
for (int i = 0; i < expression.size(); ++i) {
char c = expression[i];
if (isdigit(c)) {
num = num * 10 + (c - '0');
}
if ((c == '+' || c == '-' || c == '(' || c == ')') || i == expression.size() - 1) {
if (operatorChar == '+') values.push(num);
else if (operatorChar == '-') values.push(-num);
if (c == '(') {
operatorChar = '(';
} else if (c == ')') {
int resultInParentheses = 0;
while (!values.empty()) {
resultInParentheses += values.top();
values.pop();
}
values.push(resultInParentheses);
}
if (c == '+' || c == '-') operatorChar = c;
num = 0;
}
}
int finalResult = 0;
while (!values.empty()) {
finalResult += values.top();
values.pop();
}
return finalResult;
}

int main() {
string expr = "2+(3-1)+4";
cout << evaluateExpression(expr) << endl;
return 0;
}