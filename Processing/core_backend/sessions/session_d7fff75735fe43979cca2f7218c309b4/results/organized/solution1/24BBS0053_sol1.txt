struct Node {
int data;
struct Node* next;
}

struct Node {
int data;
struct Node* prev;
struct Node* next;
}

void pop() {
if (top == -1) {
prini("Stack Underflow! No elements to pop.\n");
return;
}
int poppedElement = stack[top];
top--;
prini("Popped element: %d\n", poppedElement);
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
printf("List elements: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void enqueue(int element) {
if ((rear + 1) % MAX == front) {
prini("Queue is full! Cannot enqueue %d.\n", element);
return;
}
if (front == -1) { // First element to be added
front = 0;
}
rear = (rear + 1) % MAX;
queue[rear] = element;
prini("Enqueued %d.\n", element);
}

void enqueue(int element) {
if ((rear + 1) % MAX == front) {
printf("Queue is full\n");
return;
}
if (front == -1) {
front = 0;
}
rear = (rear + 1) % MAX;
queue[rear] = element;
printf("Element inserted: %d\n", element);
}

void dequeue() {
if (front == -1) {
prini("Queue is empty! Cannot dequeue.\n");
return;
}
int removedElement = queue[front];
if (front == rear) { // Queue becomes empty arer removal
front = rear = -1;
} else {
front = (front + 1) % MAX;
}
prini("Dequeued element: %d.\n", removedElement);
}

void dequeue() {
if (front == -1) {
printf("Queue is empty\n");
return;
}
int element = queue[front];
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % MAX;
}
printf("Element dequeued: %d\n", element);
}

void insertAtBeginning(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
newNode->next = head;
head->prev = newNode;
head = newNode;
}
printf("Inserted %d at the beginning.\n", data);
}

void insertAtEnd(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("Inserted %d at the end.\n", data);
}

void insertAtEnd(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
printf("Element inserted at the end.\n");
return;
}
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
printf("Element inserted at the end.\n");
}

void insertAtPosition(int data, int position) {
struct Node* newNode = createNode(data);
if (position == 1) {
insertAtBeginning(data);
return;
}
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
newNode->next = temp->next;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
newNode->prev = temp;
printf("Inserted %d at position %d.\n", data, position);
}

void insertAtPosition(int data, int position) {
if (position == 1) {
insertAtBeginning(data);
return;
}
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
temp = temp->next;
}
newNode->next = temp->next;
temp->next = newNode;
printf("Element inserted at position %d.\n", position);
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
printf("Deleted %d from the beginning.\n", temp->data);
free(temp);
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
head = head->next;
free(temp);
printf("Element deleted from the beginning.\n");
}

void deleteAtPosition(int position) {
if (position == 1) {
deleteAtBeginning();
return;
}
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL || temp->next == NULL) {
printf("Invalid position.\n");
return;
}
temp = temp->next;
}
struct Node* nodeToDelete = temp->next;
temp->next = nodeToDelete->next;
free(nodeToDelete);
printf("Element deleted from position %d.\n", position);
}

void deleteAtPosition(int position) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
if (position == 1) {
deleteAtBeginning();
return;
}
struct Node* temp = head;
for (int i = 1; i < position; i++) {
if (temp == NULL) {
printf("Invalid position.\n");
return;
}
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position.\n");
return;
}
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
temp->prev->next = temp->next;
printf("Deleted %d from position %d.\n", temp->data, position);
free(temp);
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
if (head->next == NULL) {
head = NULL;
} else {
while (temp->next != NULL) {
temp = temp->next;
}
temp->prev->next = NULL;
}
printf("Deleted %d from the end.\n", temp->data);
free(temp);
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
if (head->next == NULL) {
free(head);
head = NULL;
printf("Element deleted from the end.\n");
return;
}
struct Node* temp = head;
while (temp->next->next != NULL) {
temp = temp->next;
}
free(temp->next);
temp->next = NULL;
printf("Element deleted from the end.\n");
}

void search(int data) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == data) {
printf("Element %d found at position %d.\n", data, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found in the list.\n", data);
}

void search(int data) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == data) {
printf("Element %d found at position %d.\n", data, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found.\n", data);
}

void insertAtBeginning(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->next = head;
head = newNode;
printf("Element inserted at the beginning.\n");
}

void display() {
if (top == -1) {
prini("Stack is empty.\n");
return;
}
prini("Stack elements: ");
for (int i = top; i >= 0; i--) {
prini("%d ", stack[i]);
}
prini("\n");
}

void display() {
if (front == -1) {
printf("Queue is empty\n");
return;
}
printf("Queue elements: ");
int i = front;
while (1) {
printf("%d ", queue[i]);
if (i == rear) {
break;
}
i = (i + 1) % MAX;
}
printf("\n");
}

void display() {
if (front == -1) {
prini("Queue is empty.\n");
return;
}
prini("Queue elements: ");
int i = front;
while (1) {
prini("%d ", queue[i]);
if (i == rear) {
break;
}
i = (i + 1) % MAX;
}
prini("\n");
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node* temp = head;
printf("List elements: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void push(int element) {
if (top == MAX - 1) {
prini("Stack Overflow! Cannot push %d onto the stack.\n", element);
return;
}
top++;
stack[top] = element;
prini("Pushed %d onto the stack.\n", element);
}

int main() {
int choice, element;
do {
prini("\n--- Stack OperaCons Menu ---\n");
prini("1. Push\n");
prini("2. Pop\n");
prini("3. Display\n");
prini("4. Exit\n");
prini("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
prini("Enter the element to push: ");
scanf("%d", &element);
push(element);
break;
case 2:
pop();
break;
case 3:
display();
break;
case 4:
prini("ExiCng...\n");
break;
default:
prini("Invalid choice. Please try again.\n");
}
} while (choice != 4);
return 0;
}

int main() {
int choice, element;
do {
printf("1. Enqueue 2. Dequeue 3. Display 4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter element to insert: ");
scanf("%d", &element);
enqueue(element);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
printf("Exiting...\n");
break;
default:
printf("Invalid choice\n");
}
} while (choice != 4);
return 0;
}

int main() {
int choice, element;
do {
prini("\n--- Circular Queue OperaCons ---\n");
prini("1. Enqueue\n");
prini("2. Dequeue\n");
prini("3. Display\n");
prini("4. Exit\n");
prini("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
prini("Enter the element to enqueue: ");
scanf("%d", &element);
enqueue(element);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
prini("ExiCng...\n");
break;
default:
prini("Invalid choice! Please try again.\n");
}
} while (choice != 4);
return 0;
}

int main() {
int choice, data, position;
do {
printf("\n1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n");
printf("4. Delete at Beginning\n5. Delete at End\n6. Delete at Position\n");
printf("7. Search\n8. Display\n9. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data: ");
scanf("%d", &data);
insertAtBeginning(data);
break;
case 2:
printf("Enter data: ");
scanf("%d", &data);
insertAtEnd(data);
break;
case 3:
printf("Enter data and position: ");
scanf("%d %d", &data, &position);
insertAtPosition(data, position);
break;
case 4:
deleteAtBeginning();
break;
case 5:
deleteAtEnd();
break;
case 6:
printf("Enter position: ");
scanf("%d", &position);
deleteAtPosition(position);
break;
case 7:
printf("Enter data to search: ");
scanf("%d", &data);
search(data);
break;
case 8:
display();
break;
case 9:
printf("Exiting...\n");
break;
default:
printf("Invalid choice.\n");
}
} while (choice != 9);
return 0;
}

int main() {
int choice, data, position;
do {
printf("\n--- Doubly Linked List Operations ---\n");
printf("1. Insert at Beginning\n");
printf("2. Insert at End\n");
printf("3. Insert at Position\n");
printf("4. Delete at Beginning\n");
printf("5. Delete at End\n");
printf("6. Delete at Position\n");
printf("7. Search\n");
printf("8. Display\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to insert at beginning: ");
scanf("%d", &data);
insertAtBeginning(data);
break;
case 2:
printf("Enter data to insert at end: ");
scanf("%d", &data);
insertAtEnd(data);
break;
case 3:
printf("Enter data and position: ");
scanf("%d %d", &data, &position);
insertAtPosition(data, position);
break;
case 4:
deleteAtBeginning();
break;
case 5:
deleteAtEnd();
break;
case 6:
printf("Enter position to delete: ");
scanf("%d", &position);
deleteAtPosition(position);
break;
case 7:
printf("Enter element to search: ");
scanf("%d", &data);
search(data);
break;
case 8:
display();
break;
case 9:
printf("Exiting...\n");
break;
default:
printf("Invalid choice. Please try again.\n");
}
} while (choice != 9);
return 0;
}