struct Node {
int data;
struct Node *next;
}

void enqueue() {
int value;
if ((rear + 1) % MAX == front) {
printf("Queue Overflow (Queue is full)\n");
return;
}
if (front == -1) {
front = 0;
rear = 0;
} else {
rear = (rear + 1) % MAX;
}
printf("Enter element to enqueue: ");
scanf("%d", &value);
queue[rear] = value;
printf("%d added to the queue\n", value);
}

void insertion_beginning() {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
printf("Enter data: ");
scanf("%d", &newNode->data);
newNode->next = head;
head = newNode;
printf("Node inserted at the beginning\n");
}

void dequeue() {
if (front == -1) {
printf("Queue Underflow (Queue is empty)\n");
return;
}
int value = queue[front];
if (front == rear) {
front = rear = -1; // Queue becomes empty
} else {
front = (front + 1) % MAX;
}
printf("%d dequeued from the queue\n", value);
}

void display() {
if (front == -1) {
printf("Queue is empty\n");
return;
}
printf("Queue elements: ");
int i = front;
while (i != rear) {
printf("%d ", queue[i]);
i = (i + 1) % MAX;
}
printf("%d\n", queue[rear]);
}

void insertion_end() {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
printf("Enter data: ");
scanf("%d", &newNode->data);
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
printf("Node inserted at the end\n");
}

int main() {
int choice;
while (1) {
printf("\nMenu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
enqueue();
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
return 0;
default:
printf("Invalid choice, try again\n");
}
}
}