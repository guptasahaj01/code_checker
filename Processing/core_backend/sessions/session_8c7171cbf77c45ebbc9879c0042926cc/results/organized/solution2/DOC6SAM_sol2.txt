vector<int> boundaryTraversal(vector<vector<int>>& matrix) {
vector<int> res;
traverseBoundary(matrix, matrix.size(), matrix[0].size(), res);
return res;
}

void traverseBoundary(const vector<vector<int>>& mat, int n, int m, vector<int>& res) {
for (int i = 0; i < m; i++) res.push_back(mat[0][i]);
for (int i = 1; i < n; i++) res.push_back(mat[i][m - 1]);
if (n > 1)
for (int i = m - 2; i >= 0; i--) res.push_back(mat[n - 1][i]);
if (m > 1)
for (int i = n - 2; i > 0; i--) res.push_back(mat[i][0]);
}

int main() {
vector<vector<int>> matrix = {
{1, 2, 3, 4},
{5, 6, 7, 8},
{9, 10, 11, 12}
};
vector<int> result = boundaryTraversal(matrix);
for (int val : result) cout << val << " ";
cout << endl;
return 0;
}