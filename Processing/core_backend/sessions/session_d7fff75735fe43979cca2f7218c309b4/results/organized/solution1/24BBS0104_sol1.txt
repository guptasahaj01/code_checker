struct Node {
int data;
struct Node *next;
}

struct Node {
int data;
struct Node *prev;
struct Node *next;
}

void pop()
{
if(top==-1)
{
printf("No element to pop in the stack : UNDERFLOW");
}
else{
top--;
}
}

void display(struct Node *head) {
temp = head;
while (temp != NULL) {
printf("%d <-> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

void enqueue()
{
if(Isqueuefull())
{
printf("\nThe queue is full !\n");
return ;
}
if(front==-1)
{
front=0;
}
rear++;
int x;
printf("\nenter the element you want to add\n");
scanf("%d", &x);
a[rear]=x;
}

bool Isqueuefull()
{
if(rear==n-1)
{
return true;
}
else{
return false;
}
}

void dequeue()
{
if(Isqueueempty())
{
printf("\nThe queue is empty\n");
return ;
}
else{
int x;
x=a[front];
front++;
}
}

bool Isqueueempty()
{
if(front==-1 || front>rear)
{
return true;
}
else{
return false;
}
}

void display()
{
if(Isqueueempty())
{
printf("\nThe queue is empty\n");
return ;
}
else{
for(int i=front; i<=rear; i++)
{
printf("%d\t", a[i]);
}
}
}

void Enqueue(int x) {
printf("Enqueuing %d\n", x);
if (IsFull()) {
printf("Error: Queue is Full\n");
return;
}
if (IsEmpty()) {
front = rear = 0;
} else {
rear = (rear + 1) % MAX_SIZE;
}
A[rear] = x;
}

int IsFull() {
return (rear + 1) % MAX_SIZE == front;
}

int IsEmpty() {
return (front == -1 && rear == -1);
}

void Dequeue() {
printf("Dequeuing\n");
if (IsEmpty()) {
printf("Error: Queue is Empty\n");
return;
}
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % MAX_SIZE;
}
}

int Front() {
if (IsEmpty()) {
printf("Error: Cannot return front from empty queue\n");
return -1;
}
return A[front];
}

void display() {
int i = 0;
if (IsEmpty()) {
printf("Queue : Empty\n\n");
return;
}
int count = (rear + MAX_SIZE - front) % MAX_SIZE + 1;
printf("Queue : ");
for (i = 0; i < count; i++) {
int index = (front + i) % MAX_SIZE;
printf("%d ", A[index]);
}
printf("\n\n");
}

void display()
{
printf("\nstack is : \n");
if(top==-1)
{
printf("The stack is empty");
return ;
}
for(int i=0; i<=top; i++)
{
printf("%d\t", a[i]);
}
}

void display(struct Node *head) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
temp = head;
while (temp != NULL) {
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

void push()
{
if(top==n-1)
{
printf("Cannot add element to the stack : OVERFLOW");
}
else{
top++;
printf("enter element to add in stack");
int x;
scanf("%d", &x);
a[top]=x;
}
}

int main()
{
int choice;
while(1)
{
printf("\nEnter the respective number which you want to do the operation \n1. push an
element\n2. remove an element\n3. display the stack\n4. exit\n");
scanf("%d", &choice);
switch(choice)
{
case 4: exit(1);
break;
case 1: push();
break;
case 2: pop();
break;
case 3: display();
break;
default: printf("enter a valid choice");
}
}
}

int main()
{
int choice;
while(1)
{
printf("\nenter the respectivve number you want to do the operation. \n");
printf("\n1. enqueue\n2. dequeue\n 3. display\n4. exit\n\n");
scanf("%d", &choice);
switch(choice)
{
case 1: enqueue();
break;
case 2: dequeue();
break;
case 3: display();
break;
case 4: exit(1) ;
default : printf("\nenter a valid choice\n");
}
}
return 0;
}

int main() {
printf("Enter the size of the queue: ");
scanf("%d", &MAX_SIZE);
if (MAX_SIZE <= 0) {
printf("Invalid size. Exiting program.\n");
return 0;
}
A = (int *)malloc(MAX_SIZE * sizeof(int));
if (A == NULL) {
printf("Memory allocation failed. Exiting program.\n");
return 0;
}
int choice, value;
do {
printf("\nMenu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display Queue\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the element to enqueue: ");
scanf("%d", &value);
Enqueue(value);
break;
case 2:
Dequeue();
break;
case 3:
display();
break;
case 4:
printf("Exiting program.\n");
break;
default:
printf("Invalid choice! Please try again.\n");
}
} while (choice != 4);
free(A);
return 0;
}

int main() {
int num = 0, i;
while (num != 7) {
printf("\n1. Create nodes\n2. Display linked list\n3. Insert at beginning\n4. Insert at end\n5.
Insert at middle\n6. Delete a node\n7. Exit\n");
printf("\nEnter your choice: ");
scanf("%d", &num);
switch (num) {
case 1: {
printf("\nEnter the number of nodes: ");
int n;
scanf("%d", &n);
if (n < 1) {
printf("Enter a valid number of nodes (must be at least 1).\n");
break;
}
for (i = 0; i < n; i++) {
printf("Enter data for node %d: ", (i + 1));
int data;
scanf("%d", &data);
struct Node *newnode = createnode(data);
if (head == NULL) {
head = newnode;
temp = head;
} else {
temp->next = newnode;
temp = temp->next;
}
}
break;
}
case 2:
printf("\nPrinting linked list\n");
display(head);
break;
case 3: {
printf("\nEnter data for node at beginning: ");
int d;
scanf("%d", &d);
head = insertbeg(head, d);
printf("\nAfter adding at the beginning\n");
display(head);
break;
}
case 4: {
printf("\nEnter data for node at the end: ");
int d;
scanf("%d", &d);
head = insertend(head, d);
printf("\nAfter adding at the end\n");
display(head);
break;
}
case 5: {
if (head == NULL) {
printf("List is empty. Cannot insert in the middle.\n");
break;
}
printf("\nEnter data for node in middle and the position after which to insert: ");
int d, pos;
scanf("%d%d", &d, &pos);
int count = 0;
temp = head;
while (temp != NULL) {
count++;
temp = temp->next;
}
head = insertmiddle(head, d, pos, count);
printf("\nAfter inserting in the middle\n");
display(head);
break;
}
case 6: {
printf("\nEnter the position of the node you want to delete: ");
int pos;
scanf("%d", &pos);
head = deletenode(head, pos);
printf("\nAfter deletion\n");
display(head);
break;
}
case 7:
printf("THANK YOU!\n");
break;
default:
printf("Enter a valid number.\n");
}
}
return 0;
}

int main()
{
int i;
int num = 0;
while (1) {
printf("\n1. Create nodes\n2. Display linked list\n3. Insert at beginning\n4. Insert at end\n5.
Insert at middle\n6. Delete a node\n7. Exit\n");
printf("\nEnter your choice: ");
scanf("%d", &num);
switch (num) {
case 1:
printf("\nEnter the number of nodes: ");
int n;
scanf("%d", &n);
if (n < 0) {
printf("Enter a valid number\n");
break;
}
for (i = 0; i < n; i++) {
printf("Enter data for node %d: ", (i + 1));
int data;
scanf("%d", &data);
struct Node *newnode = createnode(data);
if (head == NULL) {
head = newnode;
temp = head;
} else {
temp->next = newnode;
newnode->prev = temp;
temp = temp->next;
}
}
break;
case 2:
printf("\nPrinting linked list\n");
display(head);
break;
case 3:
printf("\nEnter data for node at beginning: ");
int d;
scanf("%d", &d);
head = insertbeg(head, d);
printf("\nAfter adding at the beginning\n");
display(head);
break;
case 4:
printf("\nEnter data for node at the end: ");
scanf("%d", &d);
head = insertend(head, d);
printf("\nAfter adding at the end\n");
display(head);
break;
case 5:
printf("\nEnter data for node in middle and the position after which to insert: ");
int pos;
scanf("%d%d", &d, &pos);
int count = 0;
temp = head;
while (temp != NULL) {
count++;
temp = temp->next;
}
head = insertmiddle(head, d, pos, count);
display(head);
break;
case 6:
printf("\nEnter the position of the node you want to delete: ");
int pos_del;
scanf("%d", &pos_del);
head = deletenode(head, pos_del);
display(head);
break;
case 7:
printf("THANK YOU!\n");
exit(0);
default:
printf("Enter a valid number.\n");
}
}
return 0;
}