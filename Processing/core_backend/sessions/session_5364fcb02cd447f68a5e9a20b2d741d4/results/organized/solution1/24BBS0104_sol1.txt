struct Node {
int data;
struct Node *next;
}

void display(struct Node *head) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
temp = head;
while (temp != NULL) {
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

int main() {
int num = 0, i;
while (num != 7) {
printf("\n1. Create nodes\n2. Display linked list\n3. Insert at beginning\n4. Insert at end\n5.
Insert at middle\n6. Delete a node\n7. Exit\n");
printf("\nEnter your choice: ");
scanf("%d", &num);
switch (num) {
case 1: {
printf("\nEnter the number of nodes: ");
int n;
scanf("%d", &n);
if (n < 1) {
printf("Enter a valid number of nodes (must be at least 1).\n");
break;
}
for (i = 0; i < n; i++) {
printf("Enter data for node %d: ", (i + 1));
int data;
scanf("%d", &data);
struct Node *newnode = createnode(data);
if (head == NULL) {
head = newnode;
temp = head;
} else {
temp->next = newnode;
temp = temp->next;
}
}
break;
}
case 2:
printf("\nPrinting linked list\n");
display(head);
break;
case 3: {
printf("\nEnter data for node at beginning: ");
int d;
scanf("%d", &d);
head = insertbeg(head, d);
printf("\nAfter adding at the beginning\n");
display(head);
break;
}
case 4: {
printf("\nEnter data for node at the end: ");
int d;
scanf("%d", &d);
head = insertend(head, d);
printf("\nAfter adding at the end\n");
display(head);
break;
}
case 5: {
if (head == NULL) {
printf("List is empty. Cannot insert in the middle.\n");
break;
}
printf("\nEnter data for node in middle and the position after which to insert: ");
int d, pos;
scanf("%d%d", &d, &pos);
int count = 0;
temp = head;
while (temp != NULL) {
count++;
temp = temp->next;
}
head = insertmiddle(head, d, pos, count);
printf("\nAfter inserting in the middle\n");
display(head);
break;
}
case 6: {
printf("\nEnter the position of the node you want to delete: ");
int pos;
scanf("%d", &pos);
head = deletenode(head, pos);
printf("\nAfter deletion\n");
display(head);
break;
}
case 7:
printf("THANK YOU!\n");
break;
default:
printf("Enter a valid number.\n");
}
}
return 0;
}