void deleteFromEnd() {
if (head == NULL) {
printf("List is empty!\n");
return;
}
struct Node* temp = head;
if (temp->next == NULL) {
head = NULL;
} else {
while (temp->next != NULL) {
temp = temp->next;
}
temp->prev->next = NULL;
}
printf("Deleted %d from the end.\n", temp->data);
free(temp);
}

void deleteFromPosition(int position) {
if (head == NULL) {
printf("List is empty!\n");
return;
}
if (position == 1) {
deleteFromBeginning();
return;
}
struct Node* temp = head;
for (int i = 1; i< position &&temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
if (temp->prev != NULL) {
temp->prev->next = temp->next;
}
printf("Deleted %d from position %d.\n", temp->data, position);
free(temp);
}
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty!\n");
return;
}
struct Node* temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
printf("Deleted %d from the beginning.\n", temp->data);
free(temp);
}

void search(int key) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == key) {
printf("Element %d found at position %d.\n", key, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found in the list.\n", key);
}

void display() {
if (head == NULL) {
printf("List is empty!\n");
return;
}
struct Node* temp = head;
printf("Doubly Linked List: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void insertAtEnd(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("Inserted %d at the end.\n", data);
}

void insertAtPosition(int data, int position) {
struct Node* newNode = createNode(data);
if (position == 1) {
insertAtBeginning(data);
return;
}
struct Node* temp = head;
for (int i = 1; i< position - 1 &&temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
newNode->next = temp->next;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
newNode->prev = temp;
printf("Inserted %d at position %d.\n", data, position);
}
}

int main() {
int choice, subChoice, data, position;
while (1) {
printf("\nMain Menu:\n");
printf("1. Insert\n");
printf("2. Delete\n");
printf("3. Search\n");
printf("4. Display\n");
printf("5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("\nInsert Options:\n");
printf("1. At Beginning\n");
printf("2. At End\n");
printf("3. At Position\n");
printf("Enter your sub-choice: ");
scanf("%d", &subChoice);
printf("Enter data to insert: ");
scanf("%d", &data);
if (subChoice == 1) {
insertAtBeginning(data);
} else if (subChoice == 2) {
insertAtEnd(data);
} else if (subChoice == 3) {
printf("Enter position: ");
scanf("%d", &position);
insertAtPosition(data, position);
} else {
printf("Invalid sub-choice!\n");
}
break;
case 2:
printf("\nDelete Options:\n");
printf("1. From Beginning\n");
printf("2. From End\n");
printf("3. From Position\n");
printf("Enter your sub-choice: ");
scanf("%d", &subChoice);
if (subChoice == 1) {
deleteFromBeginning();
} else if (subChoice == 2) {
deleteFromEnd();
} else if (subChoice == 3) {
printf("Enter position: ");
scanf("%d", &position);
deleteFromPosition(position);
} else {
printf("Invalid sub-choice!\n");
}
break;
case 3:
printf("Enter element to search: ");
scanf("%d", &data);
search(data);
break;
case 4:
display();
break;
case 5:
exit(0);
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}