void insertAtEnd(int value) {
struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
new_node->data = value;
new_node->next = NULL;
if (head == NULL) {
head = new_node;
} else {
struct Node *temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = new_node;
}
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty\n");
} else {
struct Node *temp = head;
head = head->next;
free(temp);
}
}

void insertAtPosition(int value, int position) {
struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
new_node->data = value;
if (position == 1) {
new_node->next = head;
head = new_node;
return;
}
struct Node *temp = head;
for (int i = 1; i < position - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds\n");
} else {
new_node->next = temp->next;
temp->next = new_node;
}
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty\n");
} else if (head->next == NULL) {
free(head);
head = NULL;
} else {
struct Node *temp = head;
while (temp->next->next != NULL) {
temp = temp->next;
}
free(temp->next);
temp->next = NULL;
}
}

void deleteAtPosition(int position) {
if (head == NULL) {
printf("List is empty\n");
} else if (position == 1) {
struct Node *temp = head;
head = head->next;
free(temp);
} else {
struct Node *temp = head, *prev = NULL;
for (int i = 1; i < position && temp != NULL; i++) {
prev = temp;
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds\n");
} else {
prev->next = temp->next;
free(temp);
}
}
}

void search(int value) {
struct Node *temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("Element found at position %d\n", position);
return;
}
temp = temp->next;
position++;
}
printf("Element not found\n");
}

void display() {
if (head == NULL) {
printf("List is empty\n");
} else {
struct Node *temp = head;
while (temp != NULL) {
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}
}

int main() {
int choice, value, position;
while (1) {
scanf("%d", &choice);
switch (choice) {
case 1:
scanf("%d", &value);
insertAtBeginning(value);
break;
case 2:
scanf("%d", &value);
insertAtEnd(value);
break;
case 3:
scanf("%d %d", &value, &position);
insertAtPosition(value, position);
break;
case 4:
deleteAtBeginning();
break;
case 5:
deleteAtEnd();
break;
case 6:
scanf("%d", &position);
deleteAtPosition(position);
break;
case 7:
scanf("%d", &value);
search(value);
break;
case 8:
display();
break;
case 9:
exit(0);
}
}
return 0;
}