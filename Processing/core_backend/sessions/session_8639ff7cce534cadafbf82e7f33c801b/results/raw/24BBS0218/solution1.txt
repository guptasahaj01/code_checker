struct Node
{
int data;
struct Node* next;
}

void InsertAtBeginning(int data)
{
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
newNode->data = data;
newNode->next = head;
head = newNode;
printf("%d inserted at the beginning.\n", data);
}

void InsertAtEnd(int data)
{
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
struct Node* temp = head;
newNode->data = data;
newNode->next = NULL;
if (head == NULL)
{
head = newNode;
}
else
{
while (temp->next != NULL)
{
temp = temp->next;
}
temp->next = newNode;
}
printf("%d inserted at the end.\n", data);
}

void InsertAtPosition(int data, int position)
{
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
struct Node* temp = head;
newNode->data = data;
if (position == 1)
{
newNode->next = head;
head = newNode;
printf("%d inserted at position %d.\n", data, position);
}
else
{
for (int i = 1; i < position - 1 && temp != NULL; i++)
{
temp = temp->next;
}
if (temp == NULL)
{
printf("Position out of range.\n");
}
else
{
newNode->next = temp->next;
temp->next = newNode;
printf("%d inserted at position %d.\n", data, position);
}
}
}

void DeleteAtBeginning()
{
if (head == NULL)
{
printf("List is empty.\n");
}
else
{
struct Node* temp = head;
head = head->next;
free(temp);
printf("Node deleted from the beginning.\n");
}
}

void DeleteAtEnd()
{
if (head == NULL)
{
printf("List is empty.\n");
}
else
{
struct Node* temp = head;
while (temp->next != NULL && temp->next->next != NULL)
{
temp = temp->next;
}
free(temp->next);
temp->next = NULL;
printf("Node deleted from the end.\n");
}
}

void DeleteAtPosition(int position)
{
if (head == NULL)
{
printf("List is empty.\n");
}
else
{
struct Node* temp = head;
if (position == 1)
{
head = head->next;
free(temp);
printf("Node deleted from position %d.\n", position);
}
else
{
for (int i = 1; i < position - 1 && temp != NULL; i++)
{
temp = temp->next;
}
if (temp == NULL || temp->next == NULL)
{
printf("Position out of range.\n");
}
else
{
struct Node* nodeToDelete = temp->next;
temp->next = temp->next->next;
free(nodeToDelete);
printf("Node deleted from position %d.\n", position);
}
}
}
}

void Search(int value)
{
struct Node* temp = head;
int position = 1;
while (temp != NULL)
{
if (temp->data == value)
{
printf("Element %d found at position %d.\n", value,
position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found.\n", value);
}

void Display()
{
if (head == NULL)
{
printf("List is empty.\n");
}
else
{
struct Node* temp = head;
while (temp != NULL)
{
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}
}

int main()
{
int choice, data, position;
while (1)
{
printf("\nMenu:\n");
printf("1. Insert at Beginning\n");
printf("2. Insert at End\n");
printf("3. Insert at Position\n");
printf("4. Delete at Beginning\n");
printf("5. Delete at End\n");
printf("6. Delete at Position\n");
printf("7. Search for Element\n");
printf("8. Display List\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice)
{
case 1:
printf("Enter data to insert: ");
scanf("%d", &data);
InsertAtBeginning(data);
break;
case 2:
printf("Enter data to insert: ");
scanf("%d", &data);
InsertAtEnd(data);
break;
case 3:
printf("Enter data and position to insert: ");
scanf("%d %d", &data, &position);
InsertAtPosition(data, position);
break;
case 4:
DeleteAtBeginning();
break;
case 5:
DeleteAtEnd();
break;
case 6:
printf("Enter position to delete: ");
scanf("%d", &position);
DeleteAtPosition(position);
break;
case 7:
printf("Enter element to search: ");
scanf("%d", &data);
Search(data);
break;
case 8:
Display();
break;
case 9:
exit(0);
default:
printf("Invalid choice. Try again.\n");
}
}
return 0;
}