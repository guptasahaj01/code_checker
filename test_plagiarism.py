import sys, os; sys.path.append(os.path.abspath(".")); from Processing.core_backend.main import load_api_key; from Processing.web_plagiarism_detector.web_plagiarism_checker import WebPlagiarismChecker; api_key = load_api_key(); print(f"Using API key: {api_key}"); checker = WebPlagiarismChecker(api_key, similarity_threshold=0.3); print("Starting plagiarism check..."); result = checker.check_plagiarism("test_circle.txt", language="cpp"); print(f"\nPlagiarism detected: {result.get(\"plagiarism_detected\", False)}"); print("\nSearch queries used:"); for query in result.get("queries_used", []): print(f"- {query}"); if result.get("plagiarism_detected", False): print("\nMatching sources:"); for match in result.get("plagiarism_results", []): print(f"- {match.get(\"link\", \"No link\")} (similarity: {match.get(\"similarity_score\", 0):.2f})"); else: print("\nNo plagiarism detected."); print("\nAll search results (including below threshold):"); for i, res in enumerate(result.get("results", [])[:5]): print(f"{i+1}. {res.get(\"link\", \"No link\")} (similarity: {res.get(\"similarity_score\", 0):.2f})")
