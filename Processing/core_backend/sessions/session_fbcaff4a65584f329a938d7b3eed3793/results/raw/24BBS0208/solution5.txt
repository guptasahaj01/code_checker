void deleteEnd(struct Node **head) {
if (*head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *last = *head;
while (last->next != NULL) {
last = last->next;
}
if (last->prev != NULL) {
last->prev->next = NULL;
} else {
*head = NULL;
}
free(last);
}

void menu() {
struct Node *head = NULL;
int choice, data, position;
while (1) {
printf("\nMenu:\n");
printf("1. Insert at beginning\n");
printf("2. Insert at end\n");
printf("3. Insert at given position\n");
printf("4. Delete from beginning\n");
printf("5. Delete from end\n");
printf("6. Delete from given position\n");
printf("7. Search for an element\n");
printf("8. Display list\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to insert at beginning: ");
scanf("%d", &data);
insertBeginning(&head, data);
break;
case 2:
printf("Enter data to insert at end: ");
scanf("%d", &data);
insertEnd(&head, data);
break;
case 3:
printf("Enter data to insert: ");
scanf("%d", &data);
printf("Enter position to insert: ");
scanf("%d", &position);
insertAtPosition(&head, data, position);
break;
case 4:
deleteBeginning(&head);
break;
case 5:
deleteEnd(&head);
break;
case 6:
printf("Enter position to delete: ");
scanf("%d", &position);
deleteAtPosition(&head, position);
break;
case 7:
printf("Enter element to search: ");
scanf("%d", &data);
search(head, data);
break;
case 8:
display(head);
break;
case 9:
printf("Exiting...\n");
return;
default:
printf("Invalid choice, please try again.\n");
}
}
}

void deleteAtPosition(struct Node **head, int position) {
if (position < 1) {
printf("Position should be greater than or equal to 1.\n");
return;
}
if (*head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *current = *head;
int count = 1;
while (current != NULL && count < position) {
current = current->next;
count++;
}
if (current == NULL) {
printf("Position out of range.\n");
return;
}
if (current->prev != NULL) {
current->prev->next = current->next;
} else {
*head = current->next;
}
if (current->next != NULL) {
current->next->prev = current->prev;
}
free(current);
}

void search(struct Node *head, int key) {
struct Node *current = head;
int position = 1;
while (current != NULL) {
if (current->data == key) {
printf("Element %d found at position %d.\n", key, position);
return;
}
current = current->next;
position++;
}
printf("Element %d not found in the list.\n", key);
}

void display(struct Node *head) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *current = head;
while (current != NULL) {
printf("%d <-> ", current->data);
current = current->next;
}
printf("NULL\n");
}

void insertBeginning(struct Node **head, int data) {
struct Node *newNode = createNode(data);
if (*head == NULL) {
*head = newNode;
} else {
newNode->next = *head;
(*head)->prev = newNode;
*head = newNode;
}
}

void insertAtPosition(struct Node **head, int data, int position) {
if (position < 1) {
printf("Position should be greater than or equal to 1.\n");
return;
}
struct Node *newNode = createNode(data);
if (position == 1) {
insertBeginning(head, data);
return;
}
struct Node *current = *head;
int count = 1;
while (current != NULL && count < position - 1) {
current = current->next;
count++;
}
if (current == NULL) {
printf("Position out of range.\n");
return;
}
newNode->next = current->next;
newNode->prev = current;
if (current->next != NULL) {
current->next->prev = newNode;
}
current->next = newNode;
}

void insertEnd(struct Node **head, int data) {
struct Node *newNode = createNode(data);
if (*head == NULL) {
*head = newNode;
} else {
struct Node *last = *head;
while (last->next != NULL) {
last = last->next;
}
last->next = newNode;
newNode->prev = last;
}
}

void deleteBeginning(struct Node **head) {
if (*head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = *head;
*head = (*head)->next;
if (*head != NULL) {
(*head)->prev = NULL;
}
free(temp);
}

int main() {
menu();
return 0;
}