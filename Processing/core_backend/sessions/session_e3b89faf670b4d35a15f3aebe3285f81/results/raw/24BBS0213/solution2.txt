struct DNode {
int data;
struct DNode* prev;
struct DNode* next;
}

void insert_end(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
printf("%d inserted at end\n", value);
}

void insert_at_position(int value, int position) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
newNode->data = value;
if (position == 1) {
newNode->next = head;
head = newNode;
} else {
struct Node* temp = head;
for (int i = 1; i < position - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position\n");
} else {
newNode->next = temp->next;
temp->next = newNode;
}
}
printf("%d inserted at position %d\n", value, position);
}

void delete_begin() {
if (head == NULL) {
printf("List is empty\n");
} else {
struct Node* temp = head;
head = head->next;
printf("Deleted: %d\n", temp->data);
free(temp);
}
}

void delete_end() {
if (head == NULL) {
printf("List is empty\n");
} else if (head->next == NULL) {
printf("Deleted: %d\n", head->data);
free(head);
head = NULL;
} else {
struct Node* temp = head;
while (temp->next->next != NULL) {
temp = temp->next;
}
printf("Deleted: %d\n", temp->next->data);
free(temp->next);
temp->next = NULL;
}
}

void delete_at_position(int position) {
if (head == NULL) {
printf("List is empty\n");
} else if (position == 1) {
struct Node* temp = head;
head = head->next;
printf("Deleted: %d\n", temp->data);
free(temp);
} else {
struct Node* temp = head;
struct Node* prev = NULL;
for (int i = 1; i < position && temp != NULL; i++) {
prev = temp;
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position\n");
} else {
prev->next = temp->next;
printf("Deleted: %d\n", temp->data);
free(temp);
}
}
}

void display_list() {
if (head == NULL) {
printf("List is empty\n");
} else {
struct Node* temp = head;
printf("List elements: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

void insert_begin_dll(int value) {
struct DNode* newNode = (struct DNode*)malloc(sizeof(struct DNode));
newNode->data = value;
newNode->prev = NULL;
newNode->next = head;
if (head != NULL) {
head->prev = newNode;
}
head = newNode;
printf("%d inserted at beginning\n", value);
}

int main() {
int choice, value, position;
while (1) {
printf("\nSingly Linked List Menu:\n1. Insert at Beginning\n2.
Insert at End\n3. Insert at Position\n4. Delete from Beginning\n5.
Delete at Position\n6. Delete from End\n7. Display\n8. Exit\nEnter
your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter value to insert: ");
scanf("%d", &value);
insert_begin(value);
break;
case 2:
printf("Enter value to insert: ");
scanf("%d", &value);
insert_end(value);
break;
case 3:
printf("Enter value to insert and position: ");
scanf("%d %d", &value, &position);
insert_at_position(value, position);
break;
case 4:
delete_begin();
break;
case 5:
printf("Enter position to delete: ");
scanf("%d", &position);
delete_at_position(position);
break;
case 6:
delete_end();
break;
case 7:
display_list();
break;
case 8:
printf("Exiting...\n");
return 0;
default:
printf("Invalid choice!\n");
}
}
}