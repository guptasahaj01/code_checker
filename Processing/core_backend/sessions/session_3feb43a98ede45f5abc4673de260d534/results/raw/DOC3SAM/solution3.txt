int evaluateExpression(string expression) {
stack<int> numberStack, operatorStack;
int currentNumber = 0;
char lastOperator = '+';
expression += "+";
for (int i = 0; i < expression.size(); i++) {
char currentChar = expression[i];
if (isdigit(currentChar)) {
currentNumber = currentNumber * 10 + (currentChar - '0');
}
if (currentChar == '+' || currentChar == '-' || currentChar == '(' || currentChar == ')' || i ==
expression.size() - 1) {
if (lastOperator == '+') {
numberStack.push(currentNumber);
} else if (lastOperator == '-') {
numberStack.push(-currentNumber);
}
if (currentChar == '(') {
operatorStack.push(lastOperator);
} else if (currentChar == ')') {
int temp = 0;
while (!numberStack.empty()) {
temp += numberStack.top();
numberStack.pop();
}
numberStack.push(temp);
}
if (currentChar == '+' || currentChar == '-') {
lastOperator = currentChar;
}
currentNumber = 0;
}
}
int result = 0;
while (!numberStack.empty()) {
result += numberStack.top();
numberStack.pop();
}
return result;
}

int main() {
string expr = "2+(3-1)+4";
cout << evaluateExpression(expr) << endl;
return 0;
}