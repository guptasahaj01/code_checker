struct Node {
int data;
struct Node* next;
}

void enqueue() {
int value;
if ((front == 0 && rear == MAX - 1) || (rear == (front - 1) % (MAX - 1))) {
printf("Queue Overflow\n");
} else {
printf("Enter value to enqueue: ");
scanf("%d", &value);
if (front == -1) {
front = rear = 0;
} else if (rear == MAX - 1 && front != 0) {
rear = 0;
} else {
rear++;
}
queue[rear] = value;
printf("Value enqueued successfully\n");
}
}

void insertAtBeginning(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = head;
head = newNode;
printf("Node inserted at the beginning\n");
}

void dequeue() {
if (front == -1) {
printf("Queue Underflow\n");
} else {
printf("Dequeued value: %d\n", queue[front]);
if (front == rear) {
front = rear = -1;
} else if (front == MAX - 1) {
front = 0;
} else {
front++;
}
}
}

void display() {
if (front == -1) {
printf("Queue is empty\n");
} else {
printf("Queue elements: \n");
if (rear >= front) {
for (int i = front; i <= rear; i++) {
printf("%d ", queue[i]);
}
} else {
for (int i = front; i < MAX; i++) {
printf("%d ", queue[i]);
}
for (int i = 0; i <= rear; i++) {
printf("%d ", queue[i]);
}
}
printf("\n");
}
}

void insertAtEnd(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
printf("Node inserted at the end\n");
}

int main() {
int choice;
while (1) {
printf("\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: enqueue(); break;
case 2: dequeue(); break;
case 3: display(); break;
case 4: return 0;
default: printf("Invalid choice\n");
}
}
return 0;
}