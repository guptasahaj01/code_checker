vector<int> boundaryTraversal(vector<vector<int>>& matrix) {
int n = matrix.size(), m = matrix[0].size();
vector<vector<bool>> visited(n, vector<bool>(m, false));
vector<int> res;
// Traverse top row
for (int j = 0; j < m; j++) {
res.push_back(matrix[0][j]);
visited[0][j] = true;
}
// Traverse right column
for (int i = 1; i < n; i++) {
res.push_back(matrix[i][m - 1]);
visited[i][m - 1] = true;
}
// Traverse bottom row
for (int j = m - 2; j >= 0; j--) {
if (!visited[n - 1][j]) res.push_back(matrix[n - 1][j]);
}
// Traverse left column
for (int i = n - 2; i > 0; i--) {
if (!visited[i][0]) res.push_back(matrix[i][0]);
}
return res;
}

int main() {
vector<vector<int>> matrix = {
{1, 2, 3, 4},
{5, 6, 7, 8},
{9, 10, 11, 12}
};
vector<int> result = boundaryTraversal(matrix);
for (int val : result) cout << val << " ";
cout << endl;
return 0;
}