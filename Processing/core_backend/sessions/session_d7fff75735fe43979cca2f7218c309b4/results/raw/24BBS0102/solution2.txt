void pop() {
if (top == -1) {
printf("Stack underflow. Cannot pop.\n");
return;
}
printf("%d popped from stack.\n", stack[top--]);
}

void display(CircularQueue *q) {
if (isEmpty(q)) {
printf("Queue is empty.\n");
return;
}
printf("Circular Queue elements: ");
if (q->rear >= q->front) {
for (int i = q->front; i <= q->rear; i++) {
printf("%d ", q->items[i]);
}
} else {
for (int i = q->front; i < SIZE; i++) {
printf("%d ", q->items[i]);
}
for (int i = 0; i <= q->rear; i++) {
printf("%d ", q->items[i]);
}
}
printf("\n");
}

void enqueue(CircularQueue *q, int value) {
if (isFull(q)) {
printf("Queue is full. Cannot enqueue %d.\n", value);
return;
}
if (q->front == -1) {
q->front = 0;
q->rear = 0;
} else if (q->rear == SIZE - 1 && q->front != 0) {
q->rear = 0;
} else {
q->rear++;
}
q->items[q->rear] = value;
printf("%d enqueued to the queue.\n", value);
}

void enqueue(int item) {
if (rear == MAX - 1) {
printf("Queue overflow. Cannot enqueue %d\n", item);
return;
}
if (front == -1) {
front = 0;
}
queue[++rear] = item;
printf("%d enqueued to queue.\n", item);
}

void dequeue(CircularQueue *q) {
if (isEmpty(q)) {
printf("Queue is empty. Cannot dequeue.\n");
return;
}
int data = q->items[q->front];
if (q->front == q->rear) {
q->front = -1;
q->rear = -1;
} else if (q->front == SIZE - 1) {
q->front = 0;
} else {
q->front++;
}
printf("%d dequeued from the queue.\n", data);
}

void dequeue() {
if (front == -1 || front > rear) {
printf("Queue underflow. Cannot dequeue.\n");
return;
}
printf("%d dequeued from queue.\n", queue[front++]);
if (front > rear) {
front = rear = -1;
}
}

int isEmpty(CircularQueue *q) {
return q->front == -1;
}

void initQueue(CircularQueue *q) {
q->front = -1;
q->rear = -1;
}

int isFull(CircularQueue *q) {
return (q->front == 0 && q->rear == SIZE - 1) || (q->rear == (q->front - 1) % (SIZE - 1));
}

void display() {
if (top == -1) {
printf("Stack is empty.\n");
return;
}
printf("Stack elements are:\n");
for (int i = top; i >= 0; i--) {
printf("%d\n", stack[i]);
}
}

void display() {
if (front == -1) {
printf("Queue is empty.\n");
return;
}
printf("Queue elements are:\n");
for (int i = front; i <= rear; i++) {
printf("%d\n", queue[i]);
}
}

void push(int item) {
if (top == MAX - 1) {
printf("Stack overflow. Cannot push %d\n", item);
return;
}
stack[++top] = item;
printf("%d pushed to stack.\n", item);
}

int main() {
int choice, item;
while (1) {
printf("\nMenu:\n1. PUSH\n2. POP\n3. Display\n4. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the item to push: ");
scanf("%d", &item);
push(item);
break;
case 2:
pop();
break;
case 3:
display();
break;
case 4:
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice. Please try again.\n");
}
}
}

int main() {
int choice, item;
while (1) {
printf("\nMenu:\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the item to enqueue: ");
scanf("%d", &item);
enqueue(item);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice. Please try again.\n");
}
}
}

int main() {
CircularQueue q;
initQueue(&q);
int choice, value;
while (1) {
printf("\nCircular Queue Operations:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to enqueue: ");
scanf("%d", &value);
enqueue(&q, value);
break;
case 2:
dequeue(&q);
break;
case 3:
display(&q);
break;
case 4:
printf("Exiting program.\n");
exit(0);
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}