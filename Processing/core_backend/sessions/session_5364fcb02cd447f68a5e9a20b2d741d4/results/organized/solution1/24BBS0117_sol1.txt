struct Queue {
int arr[MAX];
int front, rear;
}

void initialize(struct Queue* q) {
q->front = -1;
q->rear = -1;
}

int isFull(struct Queue* q) {
return (q->rear == MAX - 1);
}

int isEmpty(struct Queue* q) {
return (q->front == -1 || q->front > q->rear);
}

void enqueue(struct Queue* q, int value) {
if (isFull(q)) {
printf("Queue is full! Cannot enqueue %d.\n", value);
} else {
if (q->front == -1) {
q->front = 0;
}
q->rear++;
q->arr[q->rear] = value;
printf("%d enqueued successfully.\n", value);
}
}

int dequeue(struct Queue* q) {
if (isEmpty(q)) {
printf("Queue is empty! Cannot dequeue.\n");
return -1;
} else {
int dequeuedValue = q->arr[q->front];
q->front++;
if (q->front > q->rear) {
q->front = q->rear = -1;
}
return dequeuedValue;
}
}

void display(struct Queue* q) {
if (isEmpty(q)) {
printf("Queue is empty! Nothing to display.\n");
} else {
printf("Queue elements: ");
for (int i = q->front; i<= q->rear; i++) {
printf("%d ", q->arr[i]);
}
printf("\n");
}
}

int main() {
struct Queue q;
initialize(&q);
int choice, value;
while (1) {
printf("\nQueue Operations Menu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to enqueue: ");
scanf("%d", &value);
enqueue(&q, value);
break;
case 2:
value = dequeue(&q);
if (value != -1) {
printf("Dequeued value: %d\n", value);
}
break;
case 3:
display(&q);
break;
case 4:
printf("Exiting program.\n");
exit(0);
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}