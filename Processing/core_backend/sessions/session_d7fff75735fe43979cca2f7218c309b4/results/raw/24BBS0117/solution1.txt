struct Queue {
int arr[MAX];
int front, rear;
}

struct Node {
int data;
struct Node* next;
}

struct Node {
int data;
struct Node* prev;
struct Node* next;
}

void display() {
if (head == NULL) {
printf("List is empty!\n");
return;
}
struct Node* temp = head;
printf("Doubly Linked List: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void push() {
int value;
if (top == SIZE - 1) {
printf("Stack Overflow! Cannot add more elements.\n");
} else {
printf("Enter the value to push: ");
scanf("%d", &value);
stack[++top] = value;
printf("%d pushed into the stack.\n", value);
}
}

void pop() {
if (top == -1) {
printf("Stack Underflow! No elements to pop.\n");
} else {
printf("%d popped from the stack.\n", stack[top--]);
}
}

void enqueue(int value) {
if ((front == 0 && rear == SIZE - 1) || (rear + 1 == front)) {
printf("Queue Overflow\n");
} else {
if (front == -1) {
front = 0;
}
rear = (rear + 1) % SIZE;
cQueue[rear] = value;
printf("Enqueued %d into the circular queue\n", value);
}
}

void enqueue(struct Queue* q, int value) {
if (isFull(q)) {
printf("Queue is full! Cannot enqueue %d.\n", value);
} else {
if (q->front == -1) {
q->front = 0;
}
q->rear++;
q->arr[q->rear] = value;
printf("%d enqueued successfully.\n", value);
}
}

int isFull(struct Queue* q) {
return (q->rear == MAX - 1);
}

void dequeue() {
if (front == -1) {
printf("Queue Underflow\n");
} else {
printf("Dequeued element: %d\n", cQueue[front]);
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % SIZE;
}
}
}

int dequeue(struct Queue* q) {
if (isEmpty(q)) {
printf("Queue is empty! Cannot dequeue.\n");
return -1;
} else {
int dequeuedValue = q->arr[q->front];
q->front++;
if (q->front > q->rear) {
q->front = q->rear = -1;
}
return dequeuedValue;
}
}

int isEmpty(struct Queue* q) {
return (q->front == -1 || q->front > q->rear);
}

void display(struct Queue* q) {
if (isEmpty(q)) {
printf("Queue is empty! Nothing to display.\n");
} else {
printf("Queue elements: ");
for (int i = q->front; i<= q->rear; i++) {
printf("%d ", q->arr[i]);
}
printf("\n");
}
}

void search(int key) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == key) {
printf("Element %d found at position %d.\n", key, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found in the list.\n", key);
}

void search(int value) {
struct Node* temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("Element %d found at position %d\n", value, position);
return;
}
temp = temp->next;
position++;
}
printf("Element %d not found\n", value);
}

void deleteFromEnd() {
if (head == NULL) {
printf("List is empty!\n");
return;
}
struct Node* temp = head;
if (temp->next == NULL) {
head = NULL;
} else {
while (temp->next != NULL) {
temp = temp->next;
}
temp->prev->next = NULL;
}
printf("Deleted %d from the end.\n", temp->data);
free(temp);
}

void deleteFromPosition(int position) {
if (head == NULL) {
printf("List is empty!\n");
return;
}
if (position == 1) {
deleteFromBeginning();
return;
}
struct Node* temp = head;
for (int i = 1; i< position &&temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
if (temp->prev != NULL) {
temp->prev->next = temp->next;
}
printf("Deleted %d from position %d.\n", temp->data, position);
free(temp);
}
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty!\n");
return;
}
struct Node* temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
printf("Deleted %d from the beginning.\n", temp->data);
free(temp);
}

void insertAtBeginning(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
newNode->next = head;
head->prev = newNode;
head = newNode;
}
printf("Inserted %d at the beginning.\n", data);
}

void insertAtBeginning(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = head;
head = newNode;
printf("Inserted %d at the beginning\n", value);
}

void insertAtPosition(int data, int position) {
struct Node* newNode = createNode(data);
if (position == 1) {
insertAtBeginning(data);
return;
}
struct Node* temp = head;
for (int i = 1; i< position - 1 &&temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position!\n");
} else {
newNode->next = temp->next;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
newNode->prev = temp;
printf("Inserted %d at position %d.\n", data, position);
}
}

void insertAtPosition(int value, int position) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
if (position == 1) {
newNode->next = head;
head = newNode;
} else {
struct Node* temp = head;
for (int i = 1; i< position - 1 &&temp != NULL; i++) {
temp = temp->next;
}
if (temp != NULL) {
newNode->next = temp->next;
temp->next = newNode;
} else {
printf("Invalid position\n");
free(newNode);
return;
}
}
printf("Inserted %d at position %d\n", value, position);
}

void insertAtEnd(int data) {
struct Node* newNode = createNode(data);
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("Inserted %d at the end.\n", data);
}

void insertAtEnd(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
printf("Inserted %d at the end\n", value);
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = head;
head = head->next;
printf("Deleted %d from the beginning\n", temp->data);
free(temp);
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty\n");
return;
}
if (head->next == NULL) {
printf("Deleted %d from the end\n", head->data);
free(head);
head = NULL;
return;
}
struct Node* temp = head;
while (temp->next->next != NULL) {
temp = temp->next;
}
printf("Deleted %d from the end\n", temp->next->data);
free(temp->next);
temp->next = NULL;
}

void deleteAtPosition(int position) {
if (head == NULL) {
printf("List is empty\n");
return;
}
if (position == 1) {
struct Node* temp = head;
head = head->next;
printf("Deleted %d from position %d\n", temp->data, position);
free(temp);
return;
}
struct Node* temp = head;
for (int i = 1; i< position - 1 && temp->next != NULL; i++) {
temp = temp->next;
}
if (temp->next != NULL) {
struct Node* toDelete = temp->next;
temp->next = toDelete->next;
printf("Deleted %d from position %d\n", toDelete->data, position);
free(toDelete);
} else {
printf("Invalid position\n");
}
}

void display() {
if (top == -1) {
printf("Stack is empty.\n");
} else {
printf("Stack elements are:\n");
for (int i = top; i>= 0; i--) {
printf("%d\n", stack[i]);
}
}
}

void display() {
if (front == -1) {
printf("Queue is empty\n");
} else {
printf("Queue elements are: ");
int i = front;
while (i != rear) {
printf("%d ", cQueue[i]);
i = (i + 1) % SIZE;
}
printf("%d\n", cQueue[i]);
}
}

void display() {
if (head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = head;
printf("List elements: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void initialize(struct Queue* q) {
q->front = -1;
q->rear = -1;
}

int main() {
struct Queue q;
initialize(&q);
int choice, value;
while (1) {
printf("\nQueue Operations Menu:\n");
printf("1. Enqueue\n");
printf("2. Dequeue\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to enqueue: ");
scanf("%d", &value);
enqueue(&q, value);
break;
case 2:
value = dequeue(&q);
if (value != -1) {
printf("Dequeued value: %d\n", value);
}
break;
case 3:
display(&q);
break;
case 4:
printf("Exiting program.\n");
exit(0);
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}

int main() {
int choice;
while (1) {
printf("\nStack Operations Menu:\n");
printf("1. PUSH\n");
printf("2. POP\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
push();
break;
case 2:
pop();
break;
case 3:
display();
break;
case 4:
printf("Exiting the program.\n");
exit(0);
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}

int main() {
int choice, value;
while (1) {
printf("\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter value to enqueue: ");
scanf("%d", &value);
enqueue(value);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
return 0;
default:
printf("Invalid choice\n");
}
}
return 0;
}

int main() {
int choice, value, position;
while (1) {
printf("\n1. Insert\n2. Delete\n3. Search\n4. Display\n5. Exit\nEnter your choice:
");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("1. Beginning\n2. End\n3. At a given position\nEnter your choice: ");
scanf("%d", &position);
printf("Enter value: ");
scanf("%d", &value);
if (position == 1)
insertAtBeginning(value);
else if (position == 2)
insertAtEnd(value);
else {
printf("Enter position: ");
scanf("%d", &position);
insertAtPosition(value, position);
}
break;
case 2:
printf("1. Beginning\n2. End\n3. At a given position\nEnter your choice: ");
scanf("%d", &position);
if (position == 1)
deleteAtBeginning();
else if (position == 2)
deleteAtEnd();
else {
printf("Enter position: ");
scanf("%d", &position);
deleteAtPosition(position);
}
break;
case 3:
printf("Enter value to search: ");
scanf("%d", &value);
search(value);
break;
case 4:
display();
break;
case 5:
return 0;
default:
printf("Invalid choice\n");
}
}
return 0;
}

int main() {
int choice, subChoice, data, position;
while (1) {
printf("\nMain Menu:\n");
printf("1. Insert\n");
printf("2. Delete\n");
printf("3. Search\n");
printf("4. Display\n");
printf("5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("\nInsert Options:\n");
printf("1. At Beginning\n");
printf("2. At End\n");
printf("3. At Position\n");
printf("Enter your sub-choice: ");
scanf("%d", &subChoice);
printf("Enter data to insert: ");
scanf("%d", &data);
if (subChoice == 1) {
insertAtBeginning(data);
} else if (subChoice == 2) {
insertAtEnd(data);
} else if (subChoice == 3) {
printf("Enter position: ");
scanf("%d", &position);
insertAtPosition(data, position);
} else {
printf("Invalid sub-choice!\n");
}
break;
case 2:
printf("\nDelete Options:\n");
printf("1. From Beginning\n");
printf("2. From End\n");
printf("3. From Position\n");
printf("Enter your sub-choice: ");
scanf("%d", &subChoice);
if (subChoice == 1) {
deleteFromBeginning();
} else if (subChoice == 2) {
deleteFromEnd();
} else if (subChoice == 3) {
printf("Enter position: ");
scanf("%d", &position);
deleteFromPosition(position);
} else {
printf("Invalid sub-choice!\n");
}
break;
case 3:
printf("Enter element to search: ");
scanf("%d", &data);
search(data);
break;
case 4:
display();
break;
case 5:
exit(0);
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}