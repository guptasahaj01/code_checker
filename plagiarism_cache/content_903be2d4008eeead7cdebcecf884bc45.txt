#include <iostream>

using namespace std;

class Point {
private:
    float x;
    float y;
public:
    Point();
    Point(float,float);
    ~Point();
};

Point::Point() {
}

Point::Point(float a,float b) {
    x=a;
    y=b;
}

Point::~Point() {
}

class Shape {
public:
    Shape(void);
    Shape(Point);
    virtual float circumference(void) {}
    virtual float area(void) {}
protected:
    Point center_of_gravity;
};

Shape::Shape(void) {
}

Shape::Shape(Point a) {
    center_of_gravity=a;
}

//----------------------------------------

class Circle:public Shape {
private:
    float radius;
public:
    float x;
    float y;
    Circle();
    Circle(float);
    virtual float circumference(void);
    virtual float area(void);
};

Circle::Circle(void) {
}

Circle::Circle(float a) {
    radius=a;
}

float Circle::area(void) {
    float area_of_circle;
    const float pi=3.14159;
    area_of_circle=radius*radius*pi;
    return area_of_circle;
}

float Circle::circumference(void) {
    float circumference_of_circle;
    const float pi=3.14159;
    circumference_of_circle=2*radius*pi;
    return circumference_of_circle;
}

//----------------------------------------

class Square:public Shape {
private:
    float length;
public:
    Square();
    Square(float);
    virtual float circumference(void);
    virtual float area(void);
};

Square::Square(void) {
}

Square::Square(float a) {
    length=a;
}

float Square::area(void) {
    float area_of_circle;
    area_of_circle=length*length;
    return area_of_circle;
}

float Square::circumference(void) {
    float circumference_of_square;
    circumference_of_square=4*length;
    return circumference_of_square;
}

int main() {
    float a,b;
    cout<<"Enter coordinates of center of gravity: "<<endl;
    cin>>a>>b;
    Point center_of_grav(a,b);
    cout<<"Enter length of square: "<<endl;
    cin>>a;
    Square square(a);
    cout<<"Enter radius of circle: "<<endl;
    cin>>a;
    Circle circle(a);
    Shape *shape1=&circle;
    Shape *shape2=&square;
    cout<<"Area of circle is "<<shape1->area()<<", circumference is "<<shape1->circumference()<<endl;
    cout<<"Area of square is "<<shape2->area()<<", circumference is "<<shape2->circumference()<<endl;
}


#include <iostream>

using namespace std;

class Point {
private:
    float x;
    float y;
public:
    Point();
    Point(float,float);
    ~Point();
};

Point::Point() {
}

Point::Point(float a,float b) {
    x=a;
    y=b;
}

Point::~Point() {
}

class Shape {
public:
    Shape(void);
    Shape(Point);
    virtual float circumference(void) {}
    virtual float area(void) {}
protected:
    Point center_of_gravity;
};

Shape::Shape(void) {
}

Shape::Shape(Point a) {
    center_of_gravity=a;
}

//----------------------------------------

class Circle:public Shape {
private:
    float radius;
public:
    float x;
    float y;
    Circle();
    Circle(float);
    virtual float circumference(void);
    virtual float area(void);
};

Circle::Circle(void) {
}

Circle::Circle(float a) {
    radius=a;
}

float Circle::area(void) {
    float area_of_circle;
    const float pi=3.14159;
    area_of_circle=radius*radius*pi;
    return area_of_circle;
}

float Circle::circumference(void) {
    float circumference_of_circle;
    const float pi=3.14159;
    circumference_of_circle=2*radius*pi;
    return circumference_of_circle;
}

//----------------------------------------

class Square:public Shape {
private:
    float length;
public:
    Square();
    Square(float);
    virtual float circumference(void);
    virtual float area(void);
};

Square::Square(void) {
}

Square::Square(float a) {
    length=a;
}

float Square::area(void) {
    float area_of_circle;
    area_of_circle=length*length;
    return area_of_circle;
}

float Square::circumference(void) {
    float circumference_of_square;
    circumference_of_square=4*length;
    return circumference_of_square;
}

int main() {
    float a,b;
    cout<<"Enter coordinates of center of gravity: "<<endl;
    cin>>a>>b;
    Point center_of_grav(a,b);
    cout<<"Enter length of square: "<<endl;
    cin>>a;
    Square square(a);
    cout<<"Enter radius of circle: "<<endl;
    cin>>a;
    Circle circle(a);
    Shape *shape1=&circle;
    Shape *shape2=&square;
    cout<<"Area of circle is "<<shape1->area()<<", circumference is "<<shape1->circumference()<<endl;
    cout<<"Area of square is "<<shape2->area()<<", circumference is "<<shape2->circumference()<<endl;
}


    #include <iostream>
    using namespace std;

    class Point{
    private:
    float x;
    float y;
    public:
    Point();
    Point(float,float);
    ~Point();
    friend class Shape;
    };

    Point::Point(){
    }

    Point::Point(float a,float b){
    x=a;
    y=b;
    }

    Point::~Point(){
    }

    //----------------------------------------

    class Shape{
    public:
    Shape(void);
    Shape(Point);
    virtual float area(void)=0;
    virtual float circumference(void)=0;
    protected:
    float x_coordinate;
    float y_coordinate;
    Point center_of_gravity;
    };

    Shape::Shape(void){
    }

    Shape::Shape(Point a){
    center_of_gravity=a;
    x_coordinate=a.x;
    y_coordinate=a.y;
    }

    //----------------------------------------

    class Circle:public Shape{
    private:
    float radius;
    public:
    Circle();
    Circle(Point,float);
    virtual float area(void);
    virtual float circumference(void);
    };

    Circle::Circle(void){
    radius=0;
    }

    Circle::Circle(Point p,float a) : Shape(p), radius(a){
    }

    float Circle::area(void){
    float area_of_circle;
    const float pi=3.14159;
    area_of_circle=radius*radius*pi;
    return area_of_circle;
    }

    float Circle::circumference(void){
    float circumference_of_circle;
    const float pi=3.14159;
    circumference_of_circle=2*radius*pi;
    return circumference_of_circle;
    }

    //----------------------------------------

    class Square:public Shape{
    private:
    float length;
    public:
    Square();
    Square(Point,float);
    virtual float area(void);
    virtual float circumference(void);
    };

    Square::Square(void){
    length=0;
    }

    Square::Square(Point p,float a) : Shape(p), length(a){
    }


    float Square::area(void){
    float area_of_circle;
    area_of_circle=length*length;
    return area_of_circle;
    }

    float Square::circumference(void){
    float circumference_of_square;
    circumference_of_square=4*length;
    return circumference_of_square;
    }

    //----------------------------------------

    int main(){
    float a,b;
    cout<<"Enter coordinates of center of gravity: "<<endl;
    cin>>a>>b;
    Point center_of_grav(a,b);
    cout<<"Enter length of square: "<<endl;
    cin>>a;
    Square square(center_of_grav,a);
    cout<<"Enter radius of circle: "<<endl;
    cin>>a;
    Circle circle(center_of_grav,a);
    Shape *shape1=&circle;
    Shape *shape2=&square;
    cout<<"Area of circle is "<<shape1->area()<<", circumference is "<<shape1->circumference()<<endl;
    cout<<"Area of square is "<<shape2->area()<<", circumference is "<<shape2->circumference()<<endl;
    }


    #include <iostream>
    using namespace std;

    class Point{
    private:
    float x;
    float y;
    public:
    Point();
    Point(float,float);
    ~Point();
    friend class Shape;
    };

    Point::Point(){
    }

    Point::Point(float a,float b){
    x=a;
    y=b;
    }

    Point::~Point(){
    }

    //----------------------------------------

    class Shape{
    public:
    Shape(void);
    Shape(Point);
    virtual float area(void)=0;
    virtual float circumference(void)=0;
    protected:
    float x_coordinate;
    float y_coordinate;
    Point center_of_gravity;
    };

    Shape::Shape(void){
    }

    Shape::Shape(Point a){
    center_of_gravity=a;
    x_coordinate=a.x;
    y_coordinate=a.y;
    }

    //----------------------------------------

    class Circle:public Shape{
    private:
    float radius;
    public:
    Circle();
    Circle(Point,float);
    virtual float area(void);
    virtual float circumference(void);
    };

    Circle::Circle(void){
    radius=0;
    }

    Circle::Circle(Point p,float a) : Shape(p), radius(a){
    }

    float Circle::area(void){
    float area_of_circle;
    const float pi=3.14159;
    area_of_circle=radius*radius*pi;
    return area_of_circle;
    }

    float Circle::circumference(void){
    float circumference_of_circle;
    const float pi=3.14159;
    circumference_of_circle=2*radius*pi;
    return circumference_of_circle;
    }

    //----------------------------------------

    class Square:public Shape{
    private:
    float length;
    public:
    Square();
    Square(Point,float);
    virtual float area(void);
    virtual float circumference(void);
    };

    Square::Square(void){
    length=0;
    }

    Square::Square(Point p,float a) : Shape(p), length(a){
    }


    float Square::area(void){
    float area_of_circle;
    area_of_circle=length*length;
    return area_of_circle;
    }

    float Square::circumference(void){
    float circumference_of_square;
    circumference_of_square=4*length;
    return circumference_of_square;
    }

    //----------------------------------------

    int main(){
    float a,b;
    cout<<"Enter coordinates of center of gravity: "<<endl;
    cin>>a>>b;
    Point center_of_grav(a,b);
    cout<<"Enter length of square: "<<endl;
    cin>>a;
    Square square(center_of_grav,a);
    cout<<"Enter radius of circle: "<<endl;
    cin>>a;
    Circle circle(center_of_grav,a);
    Shape *shape1=&circle;
    Shape *shape2=&square;
    cout<<"Area of circle is "<<shape1->area()<<", circumference is "<<shape1->circumference()<<endl;
    cout<<"Area of square is "<<shape2->area()<<", circumference is "<<shape2->circumference()<<endl;
    }


circumference()

area()

Shape

virtual float area() = 0;

protected

center_of_gravity

Circle

Square

Square

Circle

Point center_of_grav(a,b);
...
Square square(c);   // what's the gravity center ?  


Point center_of_grav(a,b);
...
Square square(c);   // what's the gravity center ?  


Square square(center_of_grav, c); 


Square square(center_of_grav, c); 


Square::Square(Point p, float a) : Shape(p), lentgh(a) {
    // ... reserve this for more complex initisalisations
}


Square::Square(Point p, float a) : Shape(p), lentgh(a) {
    // ... reserve this for more complex initisalisations
}


class Shape {
    ...
    virtual float circumference(void) =0;  // pure virtual
    virtual float area(void) = 0; 
    ...
};


class Shape {
    ...
    virtual float circumference(void) =0;  // pure virtual
    virtual float area(void) = 0; 
    ...
};


class Shape {
    ...
    Point get_gravity_center();  
    ...
};

Point Shape::get_gravity_center() {
    return center_of_gravity;
}


class Shape {
    ...
    Point get_gravity_center();  
    ...
};

Point Shape::get_gravity_center() {
    return center_of_gravity;
}


main()

class Point {
    ... 
    float get_x() { return x; }
    float get_y() { return y; }
    ...
};


class Point {
    ... 
    float get_x() { return x; }
    float get_y() { return y; }
    ...
};


cout << "Circle of center ("<<circle.get_gravity_center().get_x()<<","
                            << circle.get_gravity_center().get_y()<<")"<<endl;


cout << "Circle of center ("<<circle.get_gravity_center().get_x()<<","
                            << circle.get_gravity_center().get_y()<<")"<<endl;