struct Node {
int data;
struct Node *prev;
struct Node *next;
}

void search(int value) {
struct Node *temp = head;
int position = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("%d found at position %d.\n", value, position);
return;
}
temp = temp->next;
position++;
}
printf("%d not found in the list.\n", value);
}

void display() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = head;
printf("List contents: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void insertAtBeginning(int value) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
newNode->prev = NULL;
newNode->next = head;
if (head != NULL) {
head->prev = newNode;
}
head = newNode;
printf("%d inserted at the beginning.\n", value);
}

void insertAtPosition(int value, int position) {
if (position == 1) {
insertAtBeginning(value);
return;
}
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
struct Node *temp = head;
for (int i = 1; i < position - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
newNode->next = temp->next;
newNode->prev = temp;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
printf("%d inserted at position %d.\n", value, position);
}

void insertAtEnd(int value) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
newNode->prev = NULL;
head = newNode;
} else {
struct Node *temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("%d inserted at the end.\n", value);
}

void deleteFromBeginning() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = head;
head = head->next;
if (head != NULL) {
head->prev = NULL;
}
printf("%d deleted from the beginning.\n", temp->data);
free(temp);
}

void deleteFromPosition(int position) {
if (head == NULL) {
printf("List is empty.\n");
return;
}
if (position == 1) {
deleteFromBeginning();
return;
}
struct Node *temp = head;
for (int i = 1; i < position && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Invalid position.\n");
return;
}
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
if (temp->prev != NULL) {
temp->prev->next = temp->next;
}
printf("%d deleted from position %d.\n", temp->data, position);
free(temp);
}

void deleteFromEnd() {
if (head == NULL) {
printf("List is empty.\n");
return;
}
struct Node *temp = head;
if (head->next == NULL) {
head = NULL;
} else {
while (temp->next != NULL) {
temp = temp->next;
}
temp->prev->next = NULL;
}
printf("%d deleted from the end.\n", temp->data);
free(temp);
}

int main() {
int choice, value, position;
while (1) {
printf("\nMenu:\n");
printf("1. Insert at Beginning\n");
printf("2. Insert at End\n");
printf("3. Insert at Position\n");
printf("4. Delete from Beginning\n");
printf("5. Delete from End\n");
printf("6. Delete from Position\n");
printf("7. Search\n");
printf("8. Display\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter value to insert at the beginning: ");
scanf("%d", &value);
insertAtBeginning(value);
break;
case 2:
printf("Enter value to insert at the end: ");
scanf("%d", &value);
insertAtEnd(value);
break;
case 3:
printf("Enter value and position to insert: ");
scanf("%d %d", &value, &position);
insertAtPosition(value, position);
break;
case 4:
deleteFromBeginning();
break;
case 5:
deleteFromEnd();
break;
case 6:
printf("Enter position to delete: ");
scanf("%d", &position);
deleteFromPosition(position);
break;
case 7:
printf("Enter value to search: ");
scanf("%d", &value);
search(value);
break;
case 8:
display();
break;
case 9:
printf("Exiting...\n");
return 0;
default:
printf("Invalid choice. Try again.\n");
}
}
return 0;
}