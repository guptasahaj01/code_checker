int longestSubstringWithKUnique(string s, int k) {
unordered_map<string, int> memo;
return helper(s, k, 0, memo);
}

int helper(string& s, int k, int start, unordered_map<string, int>& memo) {
if (start >= s.length()) return -1;
string key = to_string(start) + "," + to_string(k);
if (memo.count(key)) return memo[key];
unordered_map<char, int> freq;
int maxLen = -1;
for (int end = start; end < s.length(); ++end) {
freq[s[end]]++;
if (freq.size() == k) maxLen = max(maxLen, end - start + 1);
if (freq.size() > k) break;
}
return memo[key] = max(maxLen, helper(s, k, start + 1, memo));
}

int main() {
string s = "aabacbebebe";
int k = 3;
cout << longestSubstringWithKUnique(s, k) << endl;
return 0;
}