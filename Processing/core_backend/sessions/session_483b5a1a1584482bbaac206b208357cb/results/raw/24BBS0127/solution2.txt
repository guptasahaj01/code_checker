struct Node {
int data;
struct Node* next;
struct Node* prev;
}

void insertion_at_position() {
int position, value;
printf("Enter position: ");
scanf("%d", &position);
printf("Enter data: ");
scanf("%d", &value);
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
if (position == 1) {
newNode->next = head;
head = newNode;
printf("Node inserted at position 1\n");
} else {
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL) {
printf("Invalid position\n");
return;
}
temp = temp->next;
}
newNode->next = temp->next;
temp->next = newNode;
printf("Node inserted at position %d\n", position);
}
}

void deletion_beginning() {
if (head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = head;
head = head->next;
free(temp);
printf("Node deleted from the beginning\n");
}

void deletion_end() {
if (head == NULL) {
printf("List is empty\n");
return;
}
if (head->next == NULL) {
free(head);
head = NULL;
printf("Node deleted from the end\n");
return;
}
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
free(temp);
printf("Node deleted from the end\n");
}

void deletion_at_position() {
int position;
printf("Enter position: ");
scanf("%d", &position);
if (head == NULL) {
printf("List is empty\n");
return;
}
if (position == 1) {
struct Node* temp = head;
head = head->next;
free(temp);
printf("Node deleted from position 1\n");
return;
}
struct Node* temp = head;
for (int i = 1; i < position - 1; i++) {
if (temp == NULL || temp->next == NULL) {
printf("Invalid position\n");
return;
}
temp = temp->next;
}
struct Node* toDelete = temp->next;
temp->next = temp->next->next;
free(toDelete);
printf("Node deleted from position %d\n", position);
}

void search() {
int value;
printf("Enter value to search: ");
scanf("%d", &value);
if (head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = head;
while (temp != NULL) {
if (temp->data == value) {
printf("Element %d found\n", value);
return;
}
temp = temp->next;
}
printf("Element %d not found\n", value);
}

void display() {
if (head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = head;
printf("List elements: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}

void insertion_beginning() {
int value;
printf("Enter data: ");
scanf("%d", &value);
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
newNode->data = value;
newNode->next = head;
newNode->prev = NULL;
if (head != NULL) {
head->prev = newNode;
}
head = newNode;
printf("Node inserted at the beginning\n");
}

void insertion_end() {
int value;
printf("Enter data: ");
scanf("%d", &value);
struct Node* newNode = (struct Node*)malloc(sizeof(struct
Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
newNode->prev = NULL;
head = newNode;
printf("Node inserted at the end\n");
} else {
struct Node* temp = head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
printf("Node inserted at the end\n");
}
}

int main() {
int choice;
while (1) {
printf("\nMenu:\n");
printf("1. Insertion at Beginning\n");
printf("2. Insertion at End\n");
printf("3. Insertion at Given Position\n");
printf("4. Deletion at Beginning\n");
printf("5. Deletion at End\n");
printf("6. Deletion at Given Position\n");
printf("7. Search an Element\n");
printf("8. Display List\n");
printf("9. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: insertion_beginning(); break;
case 2: insertion_end(); break;
case 3: insertion_at_position(); break;
case 4: deletion_beginning(); break;
case 5: deletion_end(); break;
case 6: deletion_at_position(); break;
case 7: search(); break;
case 8: display(); break;
case 9: exit(0);
default: printf("Invalid choice, try again.\n");
}
}
return 0;
}