struct Node {
int data;
struct Node*
prev;
struct Node* next;
}

void insertAtPosition(int value, int pos) {
struct Node* newNode = (struct
Node*)malloc(sizeof(struct Node)); newNode-
>data = value; if (pos == 1) { newNode-
>next = head;
head = newNode;
return;
}
struct Node* temp = head;
for (int i = 1; i < pos - 1; i++) {
if (temp != NULL) temp = temp->next;
}
newNode->next = temp->next;
temp->next = newNode;
printf("Node inserted at position
%d\n", pos);
}

void
deleteAtBeginning()
{ if (head ==
NULL) {
printf("List is
empty\n");
return;
}
struct Node* temp =
head; head = head-
>next; free(temp);
printf("Node deleted from the beginning\n");
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is
empty\n");
return;
}
struct Node* temp =
head; if (head-
>next == NULL) {
head = NULL;
} else {
while (temp->next->next != NULL) {
temp = temp->next;
}
struct Node* lastNode = temp-
>next; temp->next = NULL;
free(lastNode);
}
printf("Node deleted from the end\n");
}

void
deleteAtPosition(int
pos) { if (head ==
NULL) { printf("List
is empty\n");
return;
}
struct Node* temp
= head; if (pos ==
1) { head =
head->next;
free(temp);
return;
}
for (int i = 1; i < pos - 1; i++) {
if (temp != NULL) temp = temp->next;
}
struct Node* deleteNode = temp-
>next; temp->next = temp->next-
>next; free(deleteNode);
printf("Node deleted from position %d\n", pos);
}

void search(int value) { struct Node*
temp = head; int pos = 1; while
(temp != NULL) { if (temp->data
== value) { printf("Element
found at position %d\n", pos);
return;
}
temp = temp->next;
pos++;
}
printf("Element not found\n");
}

void display() { if
(head == NULL) {
printf("List is
empty\n");
return;
}
struct Node* temp =
head; while (temp !=
NULL) { printf("%d -
> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

void insertAtBeginning(int value) {
struct Node* newNode = (struct
Node*)malloc(sizeof(struct Node)); newNode-
>data = value; newNode->next = head;
newNode->prev = NULL; if (head != NULL) {
head->prev = newNode;
}
head = newNode;
printf("Node inserted at the beginning\n");
}

void insertAtEnd(int value) {
struct Node* newNode = (struct
Node*)malloc(sizeof(struct Node)); newNode-
>data = value; newNode->next = NULL; if
(head == NULL) { newNode->prev = NULL;
head = newNode;
} else {
struct Node* temp =
head; while (temp-
>next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
printf("Node inserted at the end\n");
}

int main() {
int choice, value,
pos; while (1) {
printf("\n1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n4. Delete from
Beginning\n5. Delete from
End\n6. Delete from Position\n7. Search\n8.
Display\n9. Exit\n"); printf("Enter your choice:
"); scanf("%d", &choice); switch (choice) {
case 1: printf("Enter value: ");
scanf("%d", &value);
insertAtBeginning(value);
break;
case 2:
printf("Enter value: ");
scanf("%d", &value);
insertAtEnd(value);
break; case 3:
printf("Enter value and position:
"); scanf("%d%d",
&value, &pos);
insertAtPosition(value, pos);
break;
case 4:
deleteAtBeginning(); break;
case 5: deleteAtEnd(); break;
case 6: printf("Enter
position: ");
scanf("%d", &pos);
deleteAtPosition(pos);
break; case
7: printf("Enter value
to search: ");
scanf("%d", &value);
search(value);
break;
case 8: display();
break; case 9:
return 0;
default: printf("Invalid choice\n");
}
} }