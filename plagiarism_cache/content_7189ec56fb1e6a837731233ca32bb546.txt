1234567891011121314151617181920212223242526272829303132
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>

using namespace std;


int main(){

	sphere sphereObject;	// creating sphere object
	cube cubeObject;		// creating cube object
	float s, r;		// side and radius to be inputted

	cout << "Please input the length of the side: ";
	cin >> s;
	cubeObject.set(s);	// set the length to the side for cube

	cout << "\nPlease input the radius: ";
	cin >> r;
	sphereObject.set(r);	// set the length to the radius for the cube


	cout << "\nThe area of the sphere: " << sphereObject.print_area();
	cout << "\nThe volume of the sphere: " << sphereObject.print_volume() << "\n";

	cout << "\nThe area of the cube: " << cubeObject.print_area();
	cout << "\nThe volume of the cube: " << cubeObject.print_volume() << "\n";


}

1234567891011121314151617181920212223242526272829303132

1234567891011121314151617181920212223242526272829303132

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>

using namespace std;


int main(){

	sphere sphereObject;	// creating sphere object
	cube cubeObject;		// creating cube object
	float s, r;		// side and radius to be inputted

	cout << "Please input the length of the side: ";
	cin >> s;
	cubeObject.set(s);	// set the length to the side for cube

	cout << "\nPlease input the radius: ";
	cin >> r;
	sphereObject.set(r);	// set the length to the radius for the cube


	cout << "\nThe area of the sphere: " << sphereObject.print_area();
	cout << "\nThe volume of the sphere: " << sphereObject.print_volume() << "\n";

	cout << "\nThe area of the cube: " << cubeObject.print_area();
	cout << "\nThe volume of the cube: " << cubeObject.print_volume() << "\n";


}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>

using namespace std;


int main(){

	sphere sphereObject;	// creating sphere object
	cube cubeObject;		// creating cube object
	float s, r;		// side and radius to be inputted

	cout << "Please input the length of the side: ";
	cin >> s;
	cubeObject.set(s);	// set the length to the side for cube

	cout << "\nPlease input the radius: ";
	cin >> r;
	sphereObject.set(r);	// set the length to the radius for the cube


	cout << "\nThe area of the sphere: " << sphereObject.print_area();
	cout << "\nThe volume of the sphere: " << sphereObject.print_volume() << "\n";

	cout << "\nThe area of the cube: " << cubeObject.print_area();
	cout << "\nThe volume of the cube: " << cubeObject.print_volume() << "\n";


}

123456789101112131415
#ifndef SHAPE_H
#define SHAPE_H


class Shape(){

	public:
		Shape();

	private:
		float area, perimeter;

};

#endif 

123456789101112131415

123456789101112131415

#ifndef SHAPE_H
#define SHAPE_H


class Shape(){

	public:
		Shape();

	private:
		float area, perimeter;

};

#endif 

#ifndef SHAPE_H
#define SHAPE_H


class Shape(){

	public:
		Shape();

	private:
		float area, perimeter;

};

#endif 

123456789101112
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

Shape::Shape(){}

// Not sure what I should include here 

123456789101112

123456789101112

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

Shape::Shape(){}

// Not sure what I should include here 

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

Shape::Shape(){}

// Not sure what I should include here 

12345678910111213141516171819
#ifndef 3DSHAPE_H
#define 3DSHAPE_H


class 3Dshape : public Shape{

	public:
		3Dshape();
		float print_volume();
		float print_area();
		void set;
		float get;

	private:
		float volume;

};

#endif 

12345678910111213141516171819

12345678910111213141516171819

#ifndef 3DSHAPE_H
#define 3DSHAPE_H


class 3Dshape : public Shape{

	public:
		3Dshape();
		float print_volume();
		float print_area();
		void set;
		float get;

	private:
		float volume;

};

#endif 

#ifndef 3DSHAPE_H
#define 3DSHAPE_H


class 3Dshape : public Shape{

	public:
		3Dshape();
		float print_volume();
		float print_area();
		void set;
		float get;

	private:
		float volume;

};

#endif 

12345678910111213141516171819202122232425262728293031
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


3Dshape::3Dshape(){}

float 3Dshape::print_volume(){
	cout << volume;
}



float 3Dshape::print_area(){
	cout << area;
}



void 3Dshape::set(float s){
	side = s;
}

float 3Dshape::get(){
	return side;
}

12345678910111213141516171819202122232425262728293031

12345678910111213141516171819202122232425262728293031

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


3Dshape::3Dshape(){}

float 3Dshape::print_volume(){
	cout << volume;
}



float 3Dshape::print_area(){
	cout << area;
}



void 3Dshape::set(float s){
	side = s;
}

float 3Dshape::get(){
	return side;
}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


3Dshape::3Dshape(){}

float 3Dshape::print_volume(){
	cout << volume;
}



float 3Dshape::print_area(){
	cout << area;
}



void 3Dshape::set(float s){
	side = s;
}

float 3Dshape::get(){
	return side;
}

1234567891011121314
#ifndef SPHERE_H
#define SPHERE_H


class sphere : public 3Dshape{

	public:
		sphere();

	private:

};

#endif 

1234567891011121314

1234567891011121314

#ifndef SPHERE_H
#define SPHERE_H


class sphere : public 3Dshape{

	public:
		sphere();

	private:

};

#endif 

#ifndef SPHERE_H
#define SPHERE_H


class sphere : public 3Dshape{

	public:
		sphere();

	private:

};

#endif 

12345678910111213
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

long float pi = 3.14159265359;

sphere::sphere(){}


12345678910111213

12345678910111213

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

long float pi = 3.14159265359;

sphere::sphere(){}


#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

long float pi = 3.14159265359;

sphere::sphere(){}


1234567891011121314
#ifndef CUBE_H
#define CUBE_H


class cube : public 3Dshape{

	public:
		cube();

	private:

};

#endif 

1234567891011121314

1234567891011121314

#ifndef CUBE_H
#define CUBE_H


class cube : public 3Dshape{

	public:
		cube();

	private:

};

#endif 

#ifndef CUBE_H
#define CUBE_H


class cube : public 3Dshape{

	public:
		cube();

	private:

};

#endif 

1234567891011
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


cube::cube(){}

1234567891011

1234567891011

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


cube::cube(){}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


cube::cube(){}

12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455

12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455

#include <iostream>

class Polygon
{
    public:
        Polygon(unsigned const width, unsigned const height);
        virtual unsigned area(void) const = 0;
    protected:
        unsigned width;
        unsigned height;
};

class Rectangle : public Polygon
{
    public:
        Rectangle(unsigned const width, unsigned const height);
        unsigned area(void) const;
};

class Triangle : public Polygon
{
    public:
        Triangle(unsigned const width, unsigned const height);
        unsigned area(void) const;
};

Polygon::Polygon(unsigned const width, unsigned const height)
: width(width), height(height){}

Rectangle::Rectangle(unsigned const width, unsigned const height)
: Polygon(width, height){}

unsigned Rectangle::area(void) const
{
    return width * height;
}

Triangle::Triangle(unsigned const width, unsigned const height)
: Polygon(width, height){}

unsigned Triangle::area(void) const
{
    return width * height / 2;
}

int main()
{
    Rectangle rec(4, 10);
    Triangle  tri(4, 10);

    std::cout << "4x10 Rectangle area: " << rec.area() << std::endl;
    std::cout << "4x10 Triangle  area: " << tri.area() << std::endl;

    return 0;
}

#include <iostream>

class Polygon
{
    public:
        Polygon(unsigned const width, unsigned const height);
        virtual unsigned area(void) const = 0;
    protected:
        unsigned width;
        unsigned height;
};

class Rectangle : public Polygon
{
    public:
        Rectangle(unsigned const width, unsigned const height);
        unsigned area(void) const;
};

class Triangle : public Polygon
{
    public:
        Triangle(unsigned const width, unsigned const height);
        unsigned area(void) const;
};

Polygon::Polygon(unsigned const width, unsigned const height)
: width(width), height(height){}

Rectangle::Rectangle(unsigned const width, unsigned const height)
: Polygon(width, height){}

unsigned Rectangle::area(void) const
{
    return width * height;
}

Triangle::Triangle(unsigned const width, unsigned const height)
: Polygon(width, height){}

unsigned Triangle::area(void) const
{
    return width * height / 2;
}

int main()
{
    Rectangle rec(4, 10);
    Triangle  tri(4, 10);

    std::cout << "4x10 Rectangle area: " << rec.area() << std::endl;
    std::cout << "4x10 Triangle  area: " << tri.area() << std::endl;

    return 0;
}

4x10 Rectangle area: 40
4x10 Triangle  area: 20

1234567
sphere::sphere(float radius){

	volume = (4/3)*pi*(pow(radius,3));

	area = 4*pi*(pow(radius,2));

}

1234567

1234567

sphere::sphere(float radius){

	volume = (4/3)*pi*(pow(radius,3));

	area = 4*pi*(pow(radius,2));

}

sphere::sphere(float radius){

	volume = (4/3)*pi*(pow(radius,3));

	area = 4*pi*(pow(radius,2));

}

I figured since sphere and cube have access to 3Dshape's variables and functions 

12
		void set;
		float get;

12

12

		void set;
		float get;

		void set;
		float get;

123456789101112131415161718192021222324252627282930
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>

using namespace std;


int main(){

	float s, r;		// side and radius to be inputted

	cout << "Please input the length of the side: ";
	cin >> s;
	cube cubeObject(s);	// creates a cube object with side = user input s

	cout << "\nPlease input the radius: ";
	cin >> r;
	sphere sphereObject(r); // creates a cube object with radius = user input r


	cout << "\nThe area of the sphere: " << sphereObject.print_area();
	cout << "\nThe volume of the sphere: " << sphereObject.print_volume() << "\n";

	cout << "\nThe area of the cube: " << cubeObject.print_area();
	cout << "\nThe volume of the cube: " << cubeObject.print_volume() << "\n";


}

123456789101112131415161718192021222324252627282930

123456789101112131415161718192021222324252627282930

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>

using namespace std;


int main(){

	float s, r;		// side and radius to be inputted

	cout << "Please input the length of the side: ";
	cin >> s;
	cube cubeObject(s);	// creates a cube object with side = user input s

	cout << "\nPlease input the radius: ";
	cin >> r;
	sphere sphereObject(r); // creates a cube object with radius = user input r


	cout << "\nThe area of the sphere: " << sphereObject.print_area();
	cout << "\nThe volume of the sphere: " << sphereObject.print_volume() << "\n";

	cout << "\nThe area of the cube: " << cubeObject.print_area();
	cout << "\nThe volume of the cube: " << cubeObject.print_volume() << "\n";


}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>

using namespace std;


int main(){

	float s, r;		// side and radius to be inputted

	cout << "Please input the length of the side: ";
	cin >> s;
	cube cubeObject(s);	// creates a cube object with side = user input s

	cout << "\nPlease input the radius: ";
	cin >> r;
	sphere sphereObject(r); // creates a cube object with radius = user input r


	cout << "\nThe area of the sphere: " << sphereObject.print_area();
	cout << "\nThe volume of the sphere: " << sphereObject.print_volume() << "\n";

	cout << "\nThe area of the cube: " << cubeObject.print_area();
	cout << "\nThe volume of the cube: " << cubeObject.print_volume() << "\n";


}

123456789101112131415
#ifndef SHAPE_H
#define SHAPE_H


class Shape(){

	public:
		Shape();

	private:
		float area, perimeter;

};

#endif 

123456789101112131415

123456789101112131415

#ifndef SHAPE_H
#define SHAPE_H


class Shape(){

	public:
		Shape();

	private:
		float area, perimeter;

};

#endif 

#ifndef SHAPE_H
#define SHAPE_H


class Shape(){

	public:
		Shape();

	private:
		float area, perimeter;

};

#endif 

12345678910
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

Shape::Shape(){}

12345678910

12345678910

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

Shape::Shape(){}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

Shape::Shape(){}

12345678910111213141516171819
#ifndef 3DSHAPE_H
#define 3DSHAPE_H


class 3Dshape : public Shape{

	public:
		3Dshape();
		void print_volume();
		void print_area();
		void set();
		float get();

	protected:
		float volume;

};

#endif 

12345678910111213141516171819

12345678910111213141516171819

#ifndef 3DSHAPE_H
#define 3DSHAPE_H


class 3Dshape : public Shape{

	public:
		3Dshape();
		void print_volume();
		void print_area();
		void set();
		float get();

	protected:
		float volume;

};

#endif 

#ifndef 3DSHAPE_H
#define 3DSHAPE_H


class 3Dshape : public Shape{

	public:
		3Dshape();
		void print_volume();
		void print_area();
		void set();
		float get();

	protected:
		float volume;

};

#endif 

12345678910111213141516171819202122232425262728293031
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


3Dshape::3Dshape(){}

void 3Dshape::print_volume(){
	cout << volume;
}



void 3Dshape::print_area(){
	cout << area;
}



void 3Dshape::set(float a){	// Takes in the area from sphere and cube, maybe?
// Not sure what we want to set
}

float 3Dshape::get(){	// Gets the area from sphere and cube, maybe?
// Not sure what we're getting.
}

12345678910111213141516171819202122232425262728293031

12345678910111213141516171819202122232425262728293031

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


3Dshape::3Dshape(){}

void 3Dshape::print_volume(){
	cout << volume;
}



void 3Dshape::print_area(){
	cout << area;
}



void 3Dshape::set(float a){	// Takes in the area from sphere and cube, maybe?
// Not sure what we want to set
}

float 3Dshape::get(){	// Gets the area from sphere and cube, maybe?
// Not sure what we're getting.
}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


3Dshape::3Dshape(){}

void 3Dshape::print_volume(){
	cout << volume;
}



void 3Dshape::print_area(){
	cout << area;
}



void 3Dshape::set(float a){	// Takes in the area from sphere and cube, maybe?
// Not sure what we want to set
}

float 3Dshape::get(){	// Gets the area from sphere and cube, maybe?
// Not sure what we're getting.
}

1234567891011121314151617
#ifndef SPHERE_H
#define SPHERE_H


class sphere : public 3Dshape{

	public:
		sphere();
		sphere(float);

	protected:
		float area_s;
		float volume_s;

};

#endif 

1234567891011121314151617

1234567891011121314151617

#ifndef SPHERE_H
#define SPHERE_H


class sphere : public 3Dshape{

	public:
		sphere();
		sphere(float);

	protected:
		float area_s;
		float volume_s;

};

#endif 

#ifndef SPHERE_H
#define SPHERE_H


class sphere : public 3Dshape{

	public:
		sphere();
		sphere(float);

	protected:
		float area_s;
		float volume_s;

};

#endif 

1234567891011121314151617181920
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

long float pi = 3.14159265359;

sphere::sphere(){}

sphere::sphere(float radius){

	volume = (4/3)*pi*(pow(radius,3));

	area = 4*pi*(pow(radius,2));

}

1234567891011121314151617181920

1234567891011121314151617181920

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

long float pi = 3.14159265359;

sphere::sphere(){}

sphere::sphere(float radius){

	volume = (4/3)*pi*(pow(radius,3));

	area = 4*pi*(pow(radius,2));

}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;

long float pi = 3.14159265359;

sphere::sphere(){}

sphere::sphere(float radius){

	volume = (4/3)*pi*(pow(radius,3));

	area = 4*pi*(pow(radius,2));

}

1234567891011121314151617
#ifndef CUBE_H
#define CUBE_H


class cube : public 3Dshape{

	public:
		cube();

		cube(float);

	protected:


};

#endif 

1234567891011121314151617

1234567891011121314151617

#ifndef CUBE_H
#define CUBE_H


class cube : public 3Dshape{

	public:
		cube();

		cube(float);

	protected:


};

#endif 

#ifndef CUBE_H
#define CUBE_H


class cube : public 3Dshape{

	public:
		cube();

		cube(float);

	protected:


};

#endif 

123456789101112131415161718
#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


cube::cube(){}

cube::cube(float side){

	volume = pow(side,3);
	area = 6*(pow(side,2));

}

123456789101112131415161718

123456789101112131415161718

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


cube::cube(){}

cube::cube(float side){

	volume = pow(side,3);
	area = 6*(pow(side,2));

}

#include "Shape.h"
#include "3Dshape.h"
#include "sphere.h"
#include "cube.h"
#include <iostream>
#include <cmath>

using namespace std;


cube::cube(){}

cube::cube(float side){

	volume = pow(side,3);
	area = 6*(pow(side,2));

}

1234567891011121314151617181920212223242526272829303132333435363738394041
class Shape
{
    public:
        Shape(void);
        ~Shape(void);
        virtual double area(void) const = 0;
        virtual double perimeter(void) const =0;
};

class Shape3D : public Shape
{
    public:
        Shape3D(void);
        ~Shape3D(void);
        virtual double volume(void) const = 0;
};

class Sphere : public Shape3D
{
    public:
        Sphere(double const radius);
        ~Sphere(void);
        double area(void) const;
        double perimeter(void) const;
        double volume(void) const;
    private:
        double radius;
        static double constexpr pi = 3.14159;
};

class Cube : public Shape3D
{
    public:
        Cube(double const width);
        ~Cube(void);
        double area(void) const;
        double perimeter(void) const;
        double volume(void) const;
    private:
        double width;
};

1234567891011121314151617181920212223242526272829303132333435363738394041

1234567891011121314151617181920212223242526272829303132333435363738394041

class Shape
{
    public:
        Shape(void);
        ~Shape(void);
        virtual double area(void) const = 0;
        virtual double perimeter(void) const =0;
};

class Shape3D : public Shape
{
    public:
        Shape3D(void);
        ~Shape3D(void);
        virtual double volume(void) const = 0;
};

class Sphere : public Shape3D
{
    public:
        Sphere(double const radius);
        ~Sphere(void);
        double area(void) const;
        double perimeter(void) const;
        double volume(void) const;
    private:
        double radius;
        static double constexpr pi = 3.14159;
};

class Cube : public Shape3D
{
    public:
        Cube(double const width);
        ~Cube(void);
        double area(void) const;
        double perimeter(void) const;
        double volume(void) const;
    private:
        double width;
};

class Shape
{
    public:
        Shape(void);
        ~Shape(void);
        virtual double area(void) const = 0;
        virtual double perimeter(void) const =0;
};

class Shape3D : public Shape
{
    public:
        Shape3D(void);
        ~Shape3D(void);
        virtual double volume(void) const = 0;
};

class Sphere : public Shape3D
{
    public:
        Sphere(double const radius);
        ~Sphere(void);
        double area(void) const;
        double perimeter(void) const;
        double volume(void) const;
    private:
        double radius;
        static double constexpr pi = 3.14159;
};

class Cube : public Shape3D
{
    public:
        Cube(double const width);
        ~Cube(void);
        double area(void) const;
        double perimeter(void) const;
        double volume(void) const;
    private:
        double width;
};