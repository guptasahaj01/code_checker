struct Node {
int data;
struct Node* next;
}

struct Node {
int data;
struct Node* prev;
struct Node* next;
}

void pop() {
if (top > -1) {
printf("Popped: %d\n", stack[top--]);
} else {
printf("Stack Underflow\n");
}
}

void display(){
struct Node* temp = head;
while(temp != NULL){
printf("%d <-> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

void enqueue(int val){
if((front == 0 && rear == MAX-1) || (rear == (front-1)%(MAX-1))){
printf("Queue Overflow\n");
}else if(front == -1){
front = rear = 0;
queue[rear] = val;
}else if(rear == MAX-1 && front != 0){
rear = 0;
queue[rear] = val;
}else{
queue[++rear] = val;
}
}

void enqueue(int val){
if(rear == MAX - 1){
printf("Queue Overflow\n");
}else{
if(front == -1) front = 0;
queue[++rear] = val;
}
}

void dequeue(){
if(front == -1){
printf("Queue Underflow\n");
}else{
printf("Dequeued: %d\n", queue[front]);
if(front == rear){
front = rear = -1;
}else if(front == MAX-1){
front = 0;
}else{
front++;
}
}
}

void dequeue(){
if(front == -1 || front > rear){
printf("Queue Underflow\n");
}else{
printf("Dequeued: %d\n", queue[front++]);
if(front > rear) front = rear = -1; // Reset queue when empty
}
}

void insertAtBeginning(int val){
struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
newNode->data = val;
newNode->prev = NULL;
newNode->next = head;
if(head != NULL) head->prev = newNode;
head = newNode;
}

void insertAtBeginning(int val){
struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
newNode->data = val;
newNode->next = head;
head = newNode;
}

void insertAtEnd(int val){
struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
newNode->data = val;
newNode->next = NULL;
if(head == NULL){
newNode->prev = NULL;
head = newNode;
} else {
struct Node* temp = head;
while(temp->next != NULL) temp = temp->next;
temp->next = newNode;
newNode->prev = temp;
}
}

void insertAtEnd(int val){
struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
newNode->data = val;
newNode->next = NULL;
if(head == NULL){
head = newNode;
} else {
struct Node* temp = head;
while(temp->next != NULL) temp = temp->next;
temp->next = newNode;
}
}

void insertAtPosition(int val, int pos){
struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
newNode->data = val;
if(pos == 1){
newNode->next = head;
newNode->prev = NULL;
if(head != NULL) head->prev = newNode;
head = newNode;
return;
}
struct Node* temp = head;
for(int i = 1; i < pos-1 && temp != NULL; i++) temp = temp->next;
if(temp == NULL){
printf("Position out of range\n");
return;
}
newNode->next = temp->next;
newNode->prev = temp;
if(temp->next != NULL) temp->next->prev = newNode;
temp->next = newNode;
}

void insertAtPosition(int val, int pos){
struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
newNode->data = val;
if(pos == 1){
newNode->next = head;
head = newNode;
return;
}
struct Node* temp = head;
for(int i = 1; i < pos-1 && temp != NULL; i++) temp = temp->next;
if(temp == NULL){
printf("Position out of range\n");
return;
}
newNode->next = temp->next;
temp->next = newNode;
}

void deleteFromBeginning(){
if(head == NULL){
printf("List is empty\n");
return;
}
struct Node* temp = head;
head = head->next;
if(head != NULL) head->prev = NULL;
free(temp);
}

void deleteFromBeginning(){
if(head == NULL){
printf("List is empty\n");
return;
}
struct Node* temp = head;
head = head->next;
free(temp);
}

void deleteFromEnd(){
if(head == NULL){
printf("List is empty\n");
return;
}
struct Node* temp = head;
while(temp->next != NULL) temp = temp->next;
if(temp->prev != NULL) temp->prev->next = NULL;
else head = NULL; // Only one element was present
free(temp);
}

void deleteFromEnd(){
if(head == NULL){
printf("List is empty\n");
return;
}
if(head->next == NULL){
free(head);
head = NULL;
return;
}
struct Node* temp = head;
while(temp->next->next != NULL) temp = temp->next;
free(temp->next);
temp->next = NULL;
}

void deleteFromPosition(int pos){
if(head == NULL){
printf("List is empty\n");
return;
}
struct Node* temp = head;
if(pos == 1){
head = head->next;
if(head != NULL) head->prev = NULL;
free(temp);
return;
}
for(int i = 1; i < pos && temp != NULL; i++) temp = temp->next;
if(temp == NULL){
printf("Position out of range\n");
return;
}
if(temp->prev != NULL) temp->prev->next = temp->next;
if(temp->next != NULL) temp->next->prev = temp->prev;
free(temp);
}

void deleteFromPosition(int pos){
if(head == NULL){
printf("List is empty\n");
return;
}
struct Node* temp = head;
if(pos == 1){
head = head->next;
free(temp);
return;
}
struct Node* prev = NULL;
for(int i = 1; i < pos && temp != NULL; i++){
prev = temp;
temp = temp->next;
}
if(temp == NULL){
printf("Position out of range\n");
return;
}
prev->next = temp->next;
free(temp);
}

void search(int val){
struct Node* temp = head;
int pos = 1;
while(temp != NULL){
if(temp->data == val){
printf("Element found at position %d\n", pos);
return;
}
temp = temp->next;
pos++;
}
printf("Element not found\n");
}

void search(int val){
struct Node* temp = head;
int pos = 1;
while(temp != NULL){
if(temp->data == val){
printf("Element found at position %d\n", pos);
return;
}
temp = temp->next;
pos++;
}
printf("Element not found\n");
}

void display(){
if (top == -1){
printf("Stack is empty\n");
} else{
for (int i = 0; i <= top; i++) {
printf("%d ", stack[i]);
}
printf("\n");
}
}

void display(){
struct Node* temp = head;
while(temp != NULL){
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

void display(){
if(front == -1){
printf("Queue is empty\n");
}else{
for(int i = front; i <= rear; i++){
printf("%d ", queue[i]);
}
printf("\n");
}
}

void display(){
if(front == -1){
printf("Queue is empty\n");
}else{
if(rear >= front){
for(int i = front; i <= rear; i++){
printf("%d ", queue[i]);
}
}else{
for(int i = front; i < MAX; i++){
printf("%d ", queue[i]);
}
for(int i = 0; i <= rear; i++){
printf("%d ", queue[i]);
}
}
printf("\n");
}
}

void push(int val){
if (top < MAX - 1){
stack[++top] = val;
} else{
printf("Stack Overflow\n");
}
}

int main(){
int choice, val;
do {
printf("\nMenu:\n");
printf("1. Push\n2. Pop\n3. Display\n0. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch (choice){
case 1:
printf("Enter value to push: ");
scanf("%d", &val);
push(val);
break;
case 2:
pop();
break;
case 3:
display();
break;
case 0:
printf("Exiting...\n");
break;
default:
printf("Invalid choice, try again.\n");
}
} while (choice != 0);
return 0;
}

int main(){
int choice, val;
do{
printf("\nMenu:\n");
printf("1. Enqueue\n2. Dequeue\n3. Display\n0. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch(choice){
case 1:
printf("Enter value to enqueue: ");
scanf("%d", &val);
enqueue(val);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 0:
printf("Exiting...\n");
break;
default:
printf("Invalid choice, try again.\n");
}
}while(choice != 0);
return 0;
}

int main(){
int choice, val;
do{
printf("\nMenu:\n");
printf("1. Enqueue\n2. Dequeue\n3. Display\n0. Exit\nEnter your choice: ");
scanf("%d", &choice);
switch(choice){
case 1:
printf("Enter value to enqueue: ");
scanf("%d", &val);
enqueue(val);
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 0:
printf("Exiting...\n");
break;
default:
printf("Invalid choice, try again.\n");
}
}while(choice != 0);
return 0;
}

int main(){
int choice, val, pos;
do{
printf("\nMenu:\n");
printf("1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n4. Delete
from Beginning\n5. Delete from End\n6. Delete from Position\n7. Search\n8. Display\n0.
Exit\nEnter your choice: ");
scanf("%d", &choice);
switch(choice){
case 1:
printf("Enter value to insert at beginning: ");
scanf("%d", &val);
insertAtBeginning(val);
break;
case 2:
printf("Enter value to insert at end: ");
scanf("%d", &val);
insertAtEnd(val);
break;
case 3:
printf("Enter value to insert: ");
scanf("%d", &val);
printf("Enter position to insert: ");
scanf("%d", &pos);
insertAtPosition(val, pos);
break;
case 4:
deleteFromBeginning();
break;
case 5:
deleteFromEnd();
break;
case 6:
printf("Enter position to delete from: ");
scanf("%d", &pos);
deleteFromPosition(pos);
break;
case 7:
printf("Enter value to search: ");
scanf("%d", &val);
search(val);
break;
case 8:
display();
break;
case 0:
printf("Exiting...\n");
break;
default:
printf("Invalid choice, try again.\n");
}
}while(choice != 0);
return 0;
}

int main(){
int choice, val, pos;
do{
printf("\nMenu:\n");
printf("1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n4. Delete
from Beginning\n5. Delete from End\n6. Delete from Position\n7. Search\n8. Display\n0.
Exit\nEnter your choice: ");
scanf("%d", &choice);
switch(choice){
case 1:
printf("Enter value to insert at beginning: ");
scanf("%d", &val);
insertAtBeginning(val);
break;
case 2:
printf("Enter value to insert at end: ");
scanf("%d", &val);
insertAtEnd(val);
break;
case 3:
printf("Enter value to insert: ");
scanf("%d", &val);
printf("Enter position to insert: ");
scanf("%d", &pos);
insertAtPosition(val, pos);
break;
case 4:
deleteFromBeginning();
break;
case 5:
deleteFromEnd();
break;
case 6:
printf("Enter position to delete from: ");
scanf("%d", &pos);
deleteFromPosition(pos);
break;
case 7:
printf("Enter value to search: ");
scanf("%d", &val);
search(val);
break;
case 8:
display();
break;
case 0:
printf("Exiting...\n");
break;
default:
printf("Invalid choice, try again.\n");
}
}while(choice != 0);
return 0;
}