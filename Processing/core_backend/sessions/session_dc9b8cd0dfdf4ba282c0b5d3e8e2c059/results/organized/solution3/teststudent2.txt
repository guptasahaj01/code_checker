class Stack {
private:
T elements[100]; // Array to store elements
int topIndex; // Index of the top element
public:
// Constructor initializes the stack
Stack() {
topIndex = -1;
}
// Method to push an element onto the stack
void push(const T& value) {
if (topIndex < 99) {
elements[++topIndex] = value;
} else {
throw runtime_error("Stack overflow");
}
}
// Method to pop an element from the stack
T pop() {
if (topIndex >= 0) {
return elements[topIndex--];
} else {
throw runtime_error("Stack underflow");
}
}
// Method to check if the stack is empty
bool isEmpty() const {
return topIndex == -1;
}
// Method to peek at the top element without removing it
T peek() const {
if (topIndex >= 0) {
return elements[topIndex];
} else {
throw runtime_error("Stack is empty");
}
}
}

int main() {
cout << "Stack Demonstration:" << endl;
try {
// Create a stack of integers
Stack<int> stack;
// Check if the stack is initially empty
cout << "Is stack empty? " << (stack.isEmpty() ? "Yes" : "No") << endl;
// Push elements onto the stack
cout << "Pushing elements: 10, 20, 30, 40, 50" << endl;
stack.push(10);
stack.push(20);
stack.push(30);
stack.push(40);
stack.push(50);
// Check if the stack is empty now
cout << "Is stack empty? " << (stack.isEmpty() ? "Yes" : "No") << endl;
// Peek at the top element
cout << "Top element: " << stack.peek() << endl;
// Pop elements from the stack
cout << "Popping elements: ";
while (!stack.isEmpty()) {
cout << stack.pop() << " ";
}
cout << endl;
// Check if the stack is empty after popping all elements
cout << "Is stack empty? " << (stack.isEmpty() ? "Yes" : "No") << endl;
// Try to peek at an empty stack
cout << "Trying to peek at an empty stack: ";
cout << stack.peek() << endl;
} catch (const runtime_error& e) {
cout << "Exception caught: " << e.what() << endl;
}
return 0;
}