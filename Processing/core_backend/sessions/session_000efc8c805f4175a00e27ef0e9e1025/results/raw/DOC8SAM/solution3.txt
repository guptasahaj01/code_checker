int evaluateExpression(string expression) {
stack<int> nums;
char lastOp = '+';
int num = 0;
expression += "+"; // To handle the last number
for (int i = 0; i < expression.size(); i++) {
char ch = expression[i];
if (isdigit(ch)) {
num = num * 10 + (ch - '0');
}
if ((ch == '+' || ch == '-' || ch == '(' || ch == ')') || i == expression.size() - 1) {
if (lastOp == '+') nums.push(num);
else if (lastOp == '-') nums.push(-num);
if (ch == '(') {
nums.push(-1); // Placeholder for opening parenthesis
} else if (ch == ')') {
int sum = 0;
while (nums.top() != -1) {
sum += nums.top();
nums.pop();
}
nums.pop(); // Remove the placeholder
nums.push(sum);
}
if (ch == '+' || ch == '-') lastOp = ch;
num = 0;
}
}
int result = 0;
while (!nums.empty()) {
result += nums.top();
nums.pop();
}
return result;
}

int main() {
string expr = "2+(3-1)+4";
cout << evaluateExpression(expr) << endl;
return 0;
}