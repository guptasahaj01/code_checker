struct Node {
int data;
struct Node* next;
}

struct Node {
int data;
struct Node *prev, *next;
}

void pop() {
if(top == -1) {
printf("Stack Underflow\n");
return;
}
printf("Element %d popped from stack\n", stack[top--]);}

void display() {
if (head == NULL) {
printf("List is empty.\n");
} else {
struct Node *temp = head;
printf("List: ");
while (temp != NULL) {
printf("%d ", temp->data);
temp = temp->next;
}
printf("\n");
}
}

void enqueue() {
int value;
if ((rear + 1) % SIZE == front) {
printf("Queue is Full!\n");
} else {
printf("Enter value: ");
scanf("%d", &value);
if (front == -1) front = 0;
rear = (rear + 1) % SIZE;
queue[rear] = value;
printf("%d enqueued.\n", value);
}
}

void enqueue() {
int value;
if (rear == SIZE - 1) {
printf("Queue is Full!\n");
} else {
printf("Enter value: ");
scanf("%d", &value);
rear++;
queue[rear] = value;
printf("%d enqueued.\n", value);
}
}

void dequeue() {
if (front == -1) {
printf("Queue is Empty!\n");
} else {
printf("%d dequeued.\n", queue[front]);
if (front == rear) {
front = rear = -1;
} else {
front = (front + 1) % SIZE;
}
}
}

void dequeue() {
if (front == rear) {
printf("Queue is Empty!\n");
} else {
front++;
printf("%d dequeued.\n", queue[front]);
}
}

void insertAtBeginning(int value) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
newNode->prev = NULL;
newNode->next = head;
if (head != NULL) head->prev = newNode;
head = newNode;
printf("%d inserted at the beginning.\n", value);
}

void insertAtBeginning(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = head;
head = newNode;
printf("%d inserted at the beginning.\n", value);
}

void insertAtEnd(int value) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
newNode->prev = NULL;
head = newNode;
} else {
struct Node *temp = head;
while (temp->next != NULL) temp = temp->next;
temp->next = newNode;
newNode->prev = temp;
}
printf("%d inserted at the end.\n", value);
}

void insertAtEnd(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
newNode->next = NULL;
if (head == NULL) {
head = newNode;
} else {
struct Node* temp = head;
while (temp->next != NULL) temp = temp->next;
temp->next = newNode;
}
printf("%d inserted at the end.\n", value);
}

void insertAtPosition(int value, int pos) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
newNode->data = value;
if (pos == 1) {
newNode->prev = NULL;
newNode->next = head;
if (head != NULL) head->prev = newNode;
head = newNode;
} else {
struct Node *temp = head;
for (int i = 1; i < pos - 1 && temp != NULL; i++) temp = temp->next;
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
newNode->next = temp->next;
newNode->prev = temp;
if (temp->next != NULL) temp->next->prev = newNode;
temp->next = newNode;
}
printf("%d inserted at position %d.\n", value, pos);
}

void insertAtPosition(int value, int pos) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
if (pos == 1) {
newNode->next = head;
head = newNode;
} else {
struct Node* temp = head;
for (int i = 1; i < pos - 1 && temp != NULL; i++) temp = temp->next;
if (temp == NULL) {
printf("Invalid position.\n");
free(newNode);
return;
}
newNode->next = temp->next;
temp->next = newNode;
}
printf("%d inserted at position %d.\n", value, pos);
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty.\n");
} else {
struct Node *temp = head;
head = head->next;
if (head != NULL) head->prev = NULL;
printf("%d deleted from the beginning.\n", temp->data);
free(temp);
}
}

void deleteAtBeginning() {
if (head == NULL) {
printf("List is empty.\n");
} else {
struct Node* temp = head;
head = head->next;
printf("%d deleted from the beginning.\n", temp->data);
free(temp);
}
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty.\n");
} else if (head->next == NULL) {
printf("%d deleted from the end.\n", head->data);
free(head);
head = NULL;
} else {
struct Node *temp = head;
while (temp->next != NULL) temp = temp->next;
printf("%d deleted from the end.\n", temp->data);
temp->prev->next = NULL;
free(temp);
}
}

void deleteAtEnd() {
if (head == NULL) {
printf("List is empty.\n");
} else if (head->next == NULL) {
printf("%d deleted from the end.\n", head->data);
free(head);
head = NULL;
} else {
struct Node* temp = head;
while (temp->next->next != NULL) temp = temp->next;
printf("%d deleted from the end.\n", temp->next->data);
free(temp->next);
temp->next = NULL;
}
}

void deleteAtPosition(int pos) {
if (head == NULL) {
printf("List is empty.\n");
} else if (pos == 1) {
struct Node *temp = head;
head = head->next;
if (head != NULL) head->prev = NULL;
printf("%d deleted from position %d.\n", temp->data, pos);
free(temp);
} else {
struct Node *temp = head;
for (int i = 1; i < pos && temp != NULL; i++) temp = temp->next;
if (temp == NULL) {
printf("Invalid position.\n");
} else {
printf("%d deleted from position %d.\n", temp->data, pos);
if (temp->next != NULL) temp->next->prev = temp->prev;
if (temp->prev != NULL) temp->prev->next = temp->next;
free(temp);
}
}
}

void deleteAtPosition(int pos) {
if (head == NULL) {
printf("List is empty.\n");
} else if (pos == 1) {
struct Node* temp = head;
head = head->next;
printf("%d deleted from position %d.\n", temp->data, pos);
free(temp);
} else {
struct Node* temp = head;
for (int i = 1; i < pos - 1 && temp != NULL; i++) temp = temp->next;
if (temp == NULL || temp->next == NULL) {
printf("Invalid position.\n");
} else {
struct Node* toDelete = temp->next;
temp->next = toDelete->next;
printf("%d deleted from position %d.\n", toDelete->data, pos);
free(toDelete);
}
}
}

void search(int value) {
struct Node *temp = head;
int pos = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("%d found at position %d.\n", value, pos);
return;
}
temp = temp->next;
pos++;
}
printf("%d not found in the list.\n", value);
}

void search(int value) {
struct Node* temp = head;
int pos = 1;
while (temp != NULL) {
if (temp->data == value) {
printf("%d found at position %d.\n", value, pos);
return;
}
temp = temp->next;
pos++;
}
printf("%d not found in the list.\n", value);
}

void display() {
if(top == -1) {
printf("Stack is empty\n");
return;
}
for(int i = top; i >= 0; i--) {
printf("%d ", stack[i]);
}
printf("\n");
}

void display() {
if (front == rear) {
printf("Queue is Empty!\n");
} else {
printf("Queue: ");
for (int i = front + 1; i <= rear; i++) {
printf("%d ", queue[i]);
}
printf("\n");
}
}

void display() {
if (front == -1) {
printf("Queue is Empty!\n");
} else {
printf("Queue: ");
int i = front;
while (1) {
printf("%d ", queue[i]);
if (i == rear) break;
i = (i + 1) % SIZE;
}
printf("\n");
}
}

void push(int element) {
if(top == SIZE - 1) {
printf("Stack Overflow\n");
return;}
stack[++top] = element;
printf("Element %d pushed onto stack\n", element);
}

int main() {
int choice, element;
while(1) {
printf("1. Push\n2. Pop\n3. Display\n4. Exit\n");
scanf("%d", &choice);
switch(choice) {
case 1:
printf("Enter element to push: ");
scanf("%d", &element);
push(element);
break;
case 2:
pop();
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("Invalid choice\n"); } }
return 0;}

int main() {
int choice;
while (1) {
printf("\n1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\nEnter choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: enqueue(); break;
case 2: dequeue(); break;
case 3: display(); break;
case 4: return 0;
default: printf("Invalid choice!\n");
}
}
}

int main() {
int choice;
while (1) {
printf("\n1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\nEnter choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: enqueue(); break;
case 2: dequeue(); break;
case 3: display(); break;
case 4: return 0;
default: printf("Invalid choice!\n");
}
}
}

int main() {
int choice, value, pos;
while (1) {
printf("\n1.Insert Beginning\n2.Insert End\n3.Insert at Position\n");
printf("4.Delete Beginning\n5.Delete End\n6.Delete at Position\n");
printf("7.Search\n8.Display\n9.Exit\nEnter choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: printf("Enter value: "); scanf("%d", &value);
insertAtBeginning(value); break;
case 2: printf("Enter value: "); scanf("%d", &value);
insertAtEnd(value); break;
case 3: printf("Enter value and position: "); scanf("%d%d",
&value, &pos); insertAtPosition(value, pos); break;
case 4: deleteAtBeginning(); break;
case 5: deleteAtEnd(); break;
case 6: printf("Enter position: "); scanf("%d", &pos);
deleteAtPosition(pos); break;
case 7: printf("Enter value to search: "); scanf("%d", &value);
search(value); break;
case 8: display(); break;
case 9: return 0;
default: printf("Invalid choice!\n");
}
}
}

int main() {
int choice, value, pos;
while (1) {
printf("\n1.Insert Beginning\n2.Insert End\n3.Insert at Position\n");
printf("4.Delete Beginning\n5.Delete End\n6.Delete at Position\n");
printf("7.Search\n8.Exit\nEnter choice: ");
scanf("%d", &choice);
switch (choice) {
case 1: printf("Enter value: "); scanf("%d", &value);
insertAtBeginning(value); break;
case 2: printf("Enter value: "); scanf("%d", &value);
insertAtEnd(value); break;
case 3: printf("Enter value and position: "); scanf("%d%d",
&value, &pos); insertAtPosition(value, pos); break;
case 4: deleteAtBeginning(); break;
case 5: deleteAtEnd(); break;
case 6: printf("Enter position: "); scanf("%d", &pos);
deleteAtPosition(pos); break;
case 7: printf("Enter value to search: "); scanf("%d", &value);
search(value); break;
case 8: return 0;
default: printf("Invalid choice!\n");
}
}
}