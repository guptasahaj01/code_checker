int binarySearch(int arr[], int low, int high, int target) {
if (high >= low) {
int mid = low + (high - low) / 2;
// If found at mid, return it
if (arr[mid] == target) {
return mid;
}
// If element is smaller than mid, search in the left subarray
if (arr[mid] > target) {
return binarySearch(arr, low, mid - 1, target);
}
// Else search in the right subarray
return binarySearch(arr, mid + 1, high, target);
}
// Element not present
return -1;
}

int main() {
cout << "Binary Search Demonstration:" << endl;
// Create a sorted array
int arr[] = {3, 7, 11, 15, 18, 21, 29, 36, 42, 55, 67, 78, 90};
int size = sizeof(arr) / sizeof(arr[0]);
// Print the array
cout << "Sorted array: ";
for (int i = 0; i < size; i++) {
cout << arr[i] << " ";
}
cout << endl;
// Perform a successful search
int target1 = 29;
int result1 = binarySearch(arr, 0, size - 1, target1);
if (result1 != -1) {
cout << target1 << " found at index " << result1 << endl;
} else {
cout << target1 << " not found in the array" << endl;
}
// Perform an unsuccessful search
int target2 = 35;
int result2 = binarySearch(arr, 0, size - 1, target2);
if (result2 != -1) {
cout << target2 << " found at index " << result2 << endl;
} else {
cout << target2 << " not found in the array" << endl;
}
return 0;
}