int evaluateExpression(string expression) {
stack<int> nums, ops;
int num = 0;
char op = '+';
expression += "+"; // To ensure the last number is processed.
for (int i = 0; i < expression.size(); ++i) {
char c = expression[i];
if (isdigit(c)) {
num = num * 10 + (c - '0');
}
if ((c == '+' || c == '-' || c == '(' || c == ')') || i == expression.size() - 1) {
if (op == '+') nums.push(num);
else if (op == '-') nums.push(-num);
if (c == '(') ops.push(op);
else if (c == ')') {
int temp = 0;
while (!nums.empty()) {
temp += nums.top();
nums.pop();
}
nums.push(temp);
}
if (c == '+' || c == '-') op = c;
num = 0;
}
}
int result = 0;
while (!nums.empty()) {
result += nums.top();
nums.pop();
}
return result;
}

int main() {
string expr = "1+(2-3)+(4+5)";
cout << evaluateExpression(expr) << endl;
return 0;
}